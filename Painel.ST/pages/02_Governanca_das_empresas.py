# Importando as bibliotecas
import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
import base64
import matplotlib.pyplot as plt
import seaborn as sns

# Caminho relativo ao arquivo CSV
file_path = 'BD_Completo_Nacional_Formatado.csv'

# Carregando o arquivo CSV no Pandas DataFrame
df = pd.read_csv(file_path)

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Como √© a governan√ßa das empresas?",
    page_icon="üìà",
    layout="wide"
)

st.header("Como √© a governan√ßa das empresas?", divider="blue")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

A governan√ßa corporativa √© essencial para as empresas, pois proporciona uma estrutura de regras, pr√°ticas e processos que orientam a dire√ß√£o e o controle delas. Geralmente, a governan√ßa efetiva leva a uma melhor tomada de decis√µes, maior transpar√™ncia, e maior confian√ßa dos investidores e do p√∫blico em geral. Para estatais, particularmente, a boa governan√ßa assegura que as pr√°ticas de gest√£o estejam alinhadas com os interesses p√∫blicos e em conformidade com as pol√≠ticas governamentais.

**:blue[Conselho de Administra√ß√£o]**  
O Conselho de Administra√ß√£o √© um componente central da governan√ßa corporativa, respons√°vel por definir a dire√ß√£o estrat√©gica da empresa. Composto por membros que trazem uma diversidade de experi√™ncias e perspectivas, este conselho tem a tarefa de supervisionar as opera√ß√µes e garantir que a gest√£o esteja trabalhando para alcan√ßar os interesses dos acionistas e outros stakeholders. Ele fornece orienta√ß√£o sobre grandes decis√µes estrat√©gicas e avalia o desempenho da equipe de gest√£o.

**:blue[Conselho Fiscal]**  
O Conselho Fiscal tem como principal miss√£o a fiscaliza√ß√£o das responsabilidades financeiras e de contabilidade da empresa. Ele funciona como uma salvaguarda independente, garantindo que os gastos sejam apropriados e que as pr√°ticas cont√°beis estejam em conformidade com normas e regulamentos. Ao fazer isso, ele reduz os riscos de fraudes e promove a transpar√™ncia nos relat√≥rios financeiros, refor√ßando a confian√ßa dos acionistas e do p√∫blico.

**:blue[Comit√™ de Auditoria]**  
O Comit√™ de Auditoria trabalha em estreita colabora√ß√£o com o Conselho Fiscal, desempenhando um papel crucial no fortalecimento dos controles internos da empresa. Este comit√™ √© respons√°vel por revisar e supervisionar os processos de auditoria interna e externa, al√©m de assegurar que a empresa adote pr√°ticas de gerenciamento de riscos eficazes. Ao identificar e abordar potenciais problemas antes que se tornem significativos, o Comit√™ de Auditoria contribui para a sa√∫de financeira sustent√°vel da empresa.

Em conjunto, esses componentes de governan√ßa fortalecem a resili√™ncia operativa e financeira da empresa, alinhando suas atividades com as melhores pr√°ticas de mercado e regulat√≥rias. Eles formam um sistema de freios e contrapesos que, quando bem implementado, maximiza o valor para acionistas e outros interessados, ao mesmo tempo que mitiga riscos potenciais.

""")	

st.subheader("Quantitativo de Governan√ßa Corporativa nas Empresas Estatais do Distrito Federal em 2023", divider="blue")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo ilustra o quantitativo de empresas estatais do Distrito Federal que adotaram diferentes estruturas de governan√ßa corporativa em 2023, destacando a presen√ßa de Conselhos de Administra√ß√£o, Conselhos Fiscais e Comit√™s de Auditoria. O destaque vai para o Conselho Fiscal, implementado em 96,2% das estatais (25 empresas), indicando um compromisso com a fiscaliza√ß√£o cont√≠nua e a transpar√™ncia das opera√ß√µes financeiras. Essa estrutura desempenha um papel central na supervis√£o da gest√£o financeira, reduzindo riscos de fraudes e desvios, al√©m de assegurar que as pr√°ticas cont√°beis estejam em conformidade com as regulamenta√ß√µes aplic√°veis.

J√° o Conselho de Administra√ß√£o, presente em 84,6% das estatais (22 empresas), refor√ßa a governan√ßa estrat√©gica dessas organiza√ß√µes. Esse √≥rg√£o √© respons√°vel por definir as diretrizes de longo prazo, avaliar o desempenho dos gestores e assegurar que as a√ß√µes das empresas estejam alinhadas aos objetivos e metas estabelecidas pelo Governo do Distrito Federal. A ampla ado√ß√£o do Conselho de Administra√ß√£o √© um indicativo positivo de que a maioria das estatais busca equilibrar seus objetivos financeiros e sociais com pr√°ticas modernas de gest√£o corporativa.

Por outro lado, o Comit√™ de Auditoria, embora presente em apenas 38,5% das estatais (10 empresas), desempenha uma fun√ß√£o cr√≠tica para o fortalecimento da governan√ßa. Esse comit√™ √© respons√°vel por garantir a integridade dos controles internos, monitorar os riscos corporativos e revisar relat√≥rios financeiros com imparcialidade. A menor ado√ß√£o desse √≥rg√£o pode ser vista como uma oportunidade de melhoria, uma vez que o Comit√™ de Auditoria agrega valor √† supervis√£o dos processos e aumenta a confian√ßa de investidores e stakeholders no desempenho das estatais.

De maneira geral, o panorama apresentado pelo gr√°fico demonstra avan√ßos significativos na governan√ßa corporativa das empresas estatais do DF. No entanto, h√° espa√ßo para evolu√ß√£o, especialmente na amplia√ß√£o da implementa√ß√£o de Comit√™s de Auditoria. Fortalecer as estruturas de governan√ßa com a ado√ß√£o universal dessas pr√°ticas contribuir√° para maior efici√™ncia administrativa, mitiga√ß√£o de riscos e alinhamento √†s melhores pr√°ticas de mercado. O compromisso com a transpar√™ncia e a accountability continuar√° sendo essencial para sustentar a confian√ßa p√∫blica e garantir o cumprimento do papel estrat√©gico das estatais no desenvolvimento do Distrito Federal.

""")	

# Filtrar os dados para o Estado DF e ano de 2023
df_filtrado = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)]

# Contar o n√∫mero de empresas para cada tipo de estrutura de governan√ßa
contagem_conselho_admin = df_filtrado["gov_ca"].str.upper().eq("SIM").sum()
contagem_conselho_fiscal = df_filtrado["gov_cf"].str.upper().eq("SIM").sum()
contagem_comite_auditoria = df_filtrado["gov_aud"].str.upper().eq("SIM").sum()

# Calcular o n√∫mero total de empresas
total_empresas = len(df_filtrado)

# Criar um DataFrame com os dados de contagem
dados_contagem = pd.DataFrame(
    {
        "Estrutura de Governan√ßa": [
            "Conselho de Administra√ß√£o",
            "Conselho Fiscal",
            "Comit√™ de Auditoria",
        ],
        "N√∫mero de Empresas": [
            contagem_conselho_admin,
            contagem_conselho_fiscal,
            contagem_comite_auditoria,
        ],
    }
)

# Calcular a porcentagem de empresas para cada tipo de estrutura
dados_contagem["Porcentagem (%)"] = (
    dados_contagem["N√∫mero de Empresas"] / total_empresas
) * 100

# Op√ß√£o 1: Gr√°fico com Plotly (interativo)
fig = px.bar(
    dados_contagem, 
    x="Estrutura de Governan√ßa", 
    y="N√∫mero de Empresas",
    text="N√∫mero de Empresas",
    color="Estrutura de Governan√ßa",
    color_discrete_map={
        "Conselho de Administra√ß√£o": "#007acc",
        "Conselho Fiscal": "#008846",
        "Comit√™ de Auditoria": "#F45046"
    }
)

# Personalizar o layout do gr√°fico
fig.update_layout(
    title_text="",
    xaxis_title="Estrutura de Governan√ßa",
    yaxis_title="N√∫mero de Empresas",
    showlegend=False,
    plot_bgcolor="white",
    font=dict(size=12, color="black"),
    margin=dict(l=20, r=20, t=30, b=20),
)

# Adicionar as porcentagens aos textos das barras
fig.update_traces(
    texttemplate="%{y}<br>(%{customdata:.1f}%)",
    textposition="outside",
    textfont=dict(color="black", size=12),
    customdata=dados_contagem["Porcentagem (%)"]
)

# Mostrar o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Opcional: Exibir os dados em uma tabela
st.dataframe(
    dados_contagem.sort_values("N√∫mero de Empresas", ascending=False),
    column_config={
        "Porcentagem (%)": st.column_config.NumberColumn(
            "Porcentagem (%)",
            format="%.1f%%"
        )
    },
    hide_index=True,
    use_container_width=True
)


st.subheader("An√°lise da Distribui√ß√£o de Empresas por Combina√ß√£o de Estruturas de Governan√ßa em 2023", divider="blue")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico a seguir ilustra as combina√ß√µes de estruturas de governan√ßa presentes nas empresas estatais do Distrito Federal em 2023. Dentre as combina√ß√µes avaliadas, a presen√ßa conjunta de Conselho de Administra√ß√£o (CA) e Conselho Fiscal (CF) foi a mais comum, adotada por 13 empresas, representando uma maioria significativa. Esse resultado demonstra o compromisso da maioria das estatais em estruturar sua governan√ßa com as bases m√≠nimas necess√°rias para supervis√£o estrat√©gica e fiscaliza√ß√£o financeira, promovendo maior accountability e alinhamento √†s boas pr√°ticas de governan√ßa corporativa.

A combina√ß√£o mais robusta e instrumentos de governan√ßa, que inclui Conselho de Administra√ß√£o, Conselho Fiscal e Comit√™ de Auditoria (CA, CF, COAUD), foi adotada por 9 empresas. Essa configura√ß√£o √© considerada ideal, pois abrange os tr√™s pilares fundamentais da governan√ßa corporativa, permitindo maior controle interno, supervis√£o estrat√©gica e mitiga√ß√£o de riscos financeiros. A implementa√ß√£o dessa estrutura demonstra maturidade em governan√ßa por parte dessas estatais, pois o Comit√™ de Auditoria desempenha um papel essencial ao revisar processos financeiros e monitorar a gest√£o de riscos, fortalecendo a confian√ßa de stakeholders.

Outras configura√ß√µes, como empresas que possuem apenas o Conselho Fiscal (CF) ou uma combina√ß√£o de Conselho Fiscal e Comit√™ de Auditoria (CF, COAUD), foram menos recorrentes, representando 2 e 1 empresa, respectivamente. Notavelmente, apenas uma empresa n√£o possui qualquer estrutura de governan√ßa registrada, o que √© uma exce√ß√£o preocupante, dado o potencial impacto dessa lacuna na supervis√£o e controle. Esse cen√°rio sugere que, embora a maioria das empresas estatais tenha avan√ßado na consolida√ß√£o de suas estruturas de governan√ßa, ainda h√° espa√ßo para melhorias, especialmente na amplia√ß√£o da presen√ßa do Comit√™ de Auditoria, que agrega valor √† gest√£o e √† transpar√™ncia.

O gr√°fico reflete a diversidade nas pr√°ticas de governan√ßa adotadas pelas estatais do DF, destacando avan√ßos importantes na ado√ß√£o de estruturas combinadas. Contudo, h√° oportunidades de aprimoramento, principalmente no fortalecimento das configura√ß√µes mais completas, garantindo que todas as empresas tenham governan√ßa compat√≠vel com seu impacto estrat√©gico e financeiro. A amplia√ß√£o dessas pr√°ticas consolidar√° a credibilidade e a efici√™ncia do setor p√∫blico distrital.

""")	

# Filtrar os dados para o Estado DF e ano de 2023
df_filtrado = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)].copy()

# Definir uma fun√ß√£o para categorizar as combina√ß√µes de governan√ßa usando abrevia√ß√µes
def categorizar_combinacoes(row):
    ca = row["gov_ca"].upper() == "SIM"
    cf = row["gov_cf"].upper() == "SIM"
    aud = row["gov_aud"].upper() == "SIM"

    if ca and cf and aud:
        return "CA, CF, COAUD"
    elif ca and cf:
        return "CA, CF"
    elif ca and aud:
        return "CA, COAUD"
    elif cf and aud:
        return "CF, COAUD"
    elif ca:
        return "CA"
    elif cf:
        return "CF"
    elif aud:
        return "COAUD"
    else:
        return "Nenhum"

# Aplicar fun√ß√£o de categoriza√ß√£o
df_filtrado.loc[:, "Combina√ß√£o"] = df_filtrado.apply(categorizar_combinacoes, axis=1)

# Contar n√∫meros de empresas e agrupar por combina√ß√£o, al√©m de concatenar nomes das empresas
dados_contagem = (
    df_filtrado.groupby("Combina√ß√£o")
    .agg({"emp": lambda x: "<br>".join(x), "Combina√ß√£o": "size"})
    .rename(columns={"Combina√ß√£o": "N√∫mero de Empresas", "emp": "Lista de Empresas"})
    .reset_index()
)

# Calcular a porcentagem de empresas para cada tipo de estrutura
dados_contagem["Porcentagem (%)"] = (
    dados_contagem["N√∫mero de Empresas"] / len(df_filtrado)
) * 100

# Ordenar as combina√ß√µes por frequ√™ncia (opcional)
dados_contagem = dados_contagem.sort_values(by="N√∫mero de Empresas", ascending=False)

# Criar gr√°fico interativo com plotly
fig = px.bar(
    dados_contagem,
    x="Combina√ß√£o",
    y="N√∫mero de Empresas",
    text="N√∫mero de Empresas",
    labels={
        "Combina√ß√£o": "Combina√ß√£o de Estrutura de Governan√ßa",
        "N√∫mero de Empresas": "N√∫mero de Empresas",
    },
    hover_data={"Lista de Empresas": True, "Porcentagem (%)": ":.1f"},
    color="Combina√ß√£o",
    color_discrete_sequence=px.colors.qualitative.Bold,
    height=500
)

# Atualizar template de hover para incluir empresas
fig.update_traces(
    hovertemplate=(
        "<b>Combina√ß√£o:</b> %{x}<br>"
        "<b>N√∫mero de Empresas:</b> %{y}<br>"
        "<b>Empresas:</b> <br>%{customdata[0]}<br>"
        "<b>Porcentagem:</b> %{customdata[1]:.1f}%<extra></extra>"
    ),
    textposition="outside",
    textfont=dict(color="black", size=12)
)

# Adicionar legenda explicativa
fig.add_annotation(
    x=0.5,
    y=1.05,
    xref="paper",
    yref="paper",
    text="Legenda: CA = Conselho de Administra√ß√£o, CF = Conselho Fiscal, COAUD = Comit√™ de Auditoria",
    font=dict(size=11, color="black"),
    showarrow=False,
    align="center"
)

# Personalizar layout
fig.update_layout(
    xaxis_title="Combina√ß√£o de Estrutura de Governan√ßa",
    yaxis_title="N√∫mero de Empresas",
    showlegend=False,
    plot_bgcolor="white",
    paper_bgcolor="white",
    margin=dict(t=60, b=20, l=20, r=20),
    xaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black")
    ),
    yaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black")
    ),
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Arial",
        font_color="black"
    )
)

# Mostrar o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Exibir tabela com detalhes para consulta (opcional - pode ser expandido/contra√≠do)
with st.expander("Ver detalhes das combina√ß√µes de estruturas de governan√ßa"):
    # Criar uma vers√£o mais leg√≠vel da tabela para exibi√ß√£o
    tabela_exibir = dados_contagem.copy()
    tabela_exibir["Lista de Empresas"] = tabela_exibir["Lista de Empresas"].str.replace("<br>", ", ")
    
    # Exibir tabela formatada
    st.dataframe(
        tabela_exibir,
        column_config={
            "Porcentagem (%)": st.column_config.NumberColumn(
                "Porcentagem (%)",
                format="%.1f%%"
            ),
            "Lista de Empresas": st.column_config.TextColumn(
                "Empresas"
            )
        },
        hide_index=True,
        use_container_width=True
    )

    # Explica√ß√£o detalhada das combina√ß√µes
    st.markdown("""
    ### Significado das combina√ß√µes:
    - **CA, CF, COAUD**: Empresas com Conselho de Administra√ß√£o, Conselho Fiscal e Comit√™ de Auditoria
    - **CA, CF**: Empresas com Conselho de Administra√ß√£o e Conselho Fiscal
    - **CF, COAUD**: Empresas com Conselho Fiscal e Comit√™ de Auditoria
    - **CA**: Empresas apenas com Conselho de Administra√ß√£o
    - **CF**: Empresas apenas com Conselho Fiscal
    - **Nenhum**: Empresas sem estruturas formais de governan√ßa registradas
    """)



st.subheader("An√°lise da Presen√ßa de Estruturas de Governan√ßa por Depend√™ncia em 2023", divider="blue")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo compara a ado√ß√£o de estruturas de governan√ßa entre as empresas estatais dependentes e n√£o dependentes do Distrito Federal em 2023. Nota-se que todas as empresas dependentes (100%) possuem tanto Conselho de Administra√ß√£o (CA) quanto Conselho Fiscal (CF), enquanto entre as empresas n√£o dependentes, a presen√ßa dessas estruturas √© ligeiramente inferior: 78,9% possuem Conselho de Administra√ß√£o, e 94,7% contam com Conselho Fiscal. Esse cen√°rio reflete uma preocupa√ß√£o em assegurar mecanismos m√≠nimos de supervis√£o e estrat√©gia para empresas que demandam recursos do governo, refor√ßando a necessidade de monitoramento rigoroso sobre o uso de verbas p√∫blicas.

A presen√ßa de Comit√™s de Auditoria (COAUD) √© significativamente menor, especialmente entre as empresas dependentes, das quais apenas 14,3% (uma empresa) contam com essa estrutura, em contraste com 47,4% das empresas n√£o dependentes (nove empresas). Essa discrep√¢ncia pode indicar que as empresas dependentes, apesar de demandarem maior supervis√£o devido √† sua depend√™ncia financeira, ainda n√£o adotaram amplamente essa estrutura essencial para o monitoramento de riscos e auditoria independente. Por outro lado, a maior presen√ßa de Comit√™s de Auditoria entre empresas n√£o dependentes pode estar associada √† busca por maior efici√™ncia e conformidade regulat√≥ria, j√° que essas organiza√ß√µes operam com maior autonomia financeira.

As vantagens da ampla ado√ß√£o de Conselhos de Administra√ß√£o e Conselhos Fiscais residem na capacidade de supervisionar estrategicamente a gest√£o e monitorar as finan√ßas das empresas. Para as estatais dependentes, esses √≥rg√£os garantem maior accountability e visibilidade no uso de recursos p√∫blicos, sendo essenciais para mitigar riscos de m√° gest√£o e desvios. Contudo, a aus√™ncia ou baixa ado√ß√£o do Comit√™ de Auditoria, especialmente nas empresas dependentes, representa uma desvantagem significativa, pois limita a capacidade de identificar e corrigir problemas relacionados √† gest√£o de riscos e conformidade financeira, elementos cr√≠ticos para empresas que recebem aportes governamentais.

O panorama de governan√ßa apresentado reflete um bom n√≠vel de ades√£o √†s estruturas fundamentais, como os Conselhos de Administra√ß√£o e Fiscal, mas exp√µe lacunas no uso de ferramentas mais avan√ßadas, como os Comit√™s de Auditoria. Para maximizar a efici√™ncia e reduzir riscos, recomenda-se que as empresas dependentes priorizem a implementa√ß√£o de Comit√™s de Auditoria, refor√ßando sua capacidade de presta√ß√£o de contas e assegurando a conformidade com as melhores pr√°ticas de governan√ßa corporativa. Esse fortalecimento √© especialmente importante para empresas que recebem recursos do tesouro distrital, garantindo maior transpar√™ncia e confian√ßa da sociedade em sua gest√£o.
""")	

# Filtrar os dados para o Estado DF e ano de 2023
df_filtrado = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)]

# Fun√ß√£o para contar e calcular porcentagens de empresas em rela√ß√£o √† estrutura de governan√ßa
def contar_e_calcular_porcentagens(dep_status, total_empresas):
    ca_count = (
        df_filtrado[df_filtrado["dep"].str.upper() == dep_status]["gov_ca"]
        .str.upper()
        .eq("SIM")
        .sum()
    )
    cf_count = (
        df_filtrado[df_filtrado["dep"].str.upper() == dep_status]["gov_cf"]
        .str.upper()
        .eq("SIM")
        .sum()
    )
    aud_count = (
        df_filtrado[df_filtrado["dep"].str.upper() == dep_status]["gov_aud"]
        .str.upper()
        .eq("SIM")
        .sum()
    )
    return (
        (ca_count, ca_count / total_empresas * 100),
        (cf_count, cf_count / total_empresas * 100),
        (aud_count, aud_count / total_empresas * 100),
    )

# Calcular somat√≥rios e porcentagens para empresas dependentes e n√£o dependentes
total_dependentes = df_filtrado[df_filtrado["dep"].str.upper() == "DEPENDENTE"].shape[0]
total_nao_dependentes = df_filtrado[
    df_filtrado["dep"].str.upper() == "N√ÉO DEPENDENTE"
].shape[0]

dependentes_dados = contar_e_calcular_porcentagens("DEPENDENTE", total_dependentes)
nao_dependentes_dados = contar_e_calcular_porcentagens(
    "N√ÉO DEPENDENTE", total_nao_dependentes
)

# Estruturar os dados para o Plotly
estruturas = ["Conselho de Administra√ß√£o", "Conselho Fiscal", "Comit√™ de Auditoria"]

# Criar DataFrame para o gr√°fico
dados_grafico = pd.DataFrame({
    "Estrutura": estruturas * 2,
    "Status de Depend√™ncia": ["Dependente"] * 3 + ["N√£o Dependente"] * 3,
    "Porcentagem": [d[1] for d in dependentes_dados] + [d[1] for d in nao_dependentes_dados],
    "Quantidade": [d[0] for d in dependentes_dados] + [d[0] for d in nao_dependentes_dados],
    "Total Empresas": [total_dependentes] * 3 + [total_nao_dependentes] * 3
})

# Criar gr√°fico com Plotly
fig = px.bar(
    dados_grafico,
    x="Estrutura",
    y="Porcentagem",
    color="Status de Depend√™ncia",
    barmode="group",
    text="Quantidade",  # Mostrar a quantidade nas barras
    color_discrete_map={
        "Dependente": "#F45046",
        "N√£o Dependente": "#007acc"
    },
    labels={
        "Porcentagem": "Porcentagem de Empresas (%)",
        "Estrutura": "Estrutura de Governan√ßa"
    },
    height=500
)

# Adicionar legenda explicativa - com posi√ß√£o ajustada
fig.add_annotation(
    x=0.5,
    y=1.15,  # Aumentar este valor para mover a legenda para cima
    xref="paper",
    yref="paper",
    text="Legenda: CA = Conselho de Administra√ß√£o, CF = Conselho Fiscal, COAUD = Comit√™ de Auditoria",
    font=dict(size=11, color="black"),
    showarrow=False,
    align="center"
)

# Personalizar layout
fig.update_layout(
    xaxis_title="Combina√ß√£o de Estrutura de Governan√ßa",
    yaxis_title="N√∫mero de Empresas",
    showlegend=False,
    plot_bgcolor="white",
    paper_bgcolor="white",
    margin=dict(t=80, b=20, l=20, r=20),  # Aumentar margem superior para dar espa√ßo √† legenda
    xaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black")
    ),
    yaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black")
    ),
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Arial",
        font_color="black"
    ),
    height=550  # Aumentar altura do gr√°fico para acomodar melhor a legenda
)

# Ajustar formato dos r√≥tulos nas barras
fig.update_traces(
    texttemplate="%{text}<br>(%{y:.1f}%)",
    textposition="outside",
    textfont=dict(color="black", size=12),
    hovertemplate="<b>%{x}</b><br>Status: %{data.name}<br>Quantidade: %{text}<br>Porcentagem: %{y:.1f}%<br>Total de empresas: %{customdata}<extra></extra>",
    customdata=dados_grafico["Total Empresas"]
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Opcional: Tabela com os detalhes
with st.expander("Ver dados detalhados"):
    # Preparar dados para a tabela
    tabela_dependencia = pd.DataFrame({
        "Estrutura de Governan√ßa": estruturas,
        "Dependentes": [f"{d[0]} ({d[1]:.1f}%)" for d in dependentes_dados],
        "N√£o Dependentes": [f"{d[0]} ({d[1]:.1f}%)" for d in nao_dependentes_dados],
        "Total": [
            f"{d1[0] + d2[0]} ({(d1[0] + d2[0]) / (total_dependentes + total_nao_dependentes) * 100:.1f}%)"
            for d1, d2 in zip(dependentes_dados, nao_dependentes_dados)
        ]
    })
    
    st.dataframe(
        tabela_dependencia,
        hide_index=True,
        use_container_width=True
    )
    
    # Resumo
    st.info(f"""
    **Resumo das estruturas de governan√ßa por depend√™ncia:**
    - Total de empresas dependentes: {total_dependentes}
    - Total de empresas n√£o dependentes: {total_nao_dependentes}
    - Total geral: {total_dependentes + total_nao_dependentes}
    """)


st.subheader("An√°lise da Rentabilidade M√©dia das Empresas pela Combina√ß√£o de Estruturas de Governan√ßa", divider="blue")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo representa a rentabilidade m√©dia das empresas estatais distritais, calculada pela rela√ß√£o entre lucro e patrim√¥nio l√≠quido, considerando diferentes combina√ß√µes de estruturas de governan√ßa em 2023. A combina√ß√£o que inclui Conselho de Administra√ß√£o (CA), Conselho Fiscal (CF) e Comit√™ de Auditoria (COAUD) apresenta uma rentabilidade m√©dia de 17,5%, destacando-se como uma das mais robustas. Essa configura√ß√£o promove maior supervis√£o estrat√©gica e controle interno, elementos que contribuem significativamente para o desempenho financeiro positivo dessas empresas. A presen√ßa do Comit√™ de Auditoria nessa configura√ß√£o √© especialmente relevante, pois refor√ßa a capacidade de identificar riscos e promover uma gest√£o eficiente.

Por outro lado, empresas que possuem apenas o Conselho Fiscal (CF) como estrutura de governan√ßa registraram a maior rentabilidade m√©dia, de 26,4%. Esse resultado pode refletir um foco direcionado em aspectos financeiros e cont√°beis, sem os custos e a complexidade de estruturas adicionais. No entanto, a aus√™ncia de um Conselho de Administra√ß√£o ou Comit√™ de Auditoria pode limitar o alinhamento estrat√©gico e o monitoramento detalhado dos riscos de longo prazo. Isso sugere que, embora o desempenho financeiro imediato seja positivo, a sustentabilidade dessas empresas pode ser desafiada sem uma supervis√£o estrat√©gica abrangente.

As empresas que adotaram apenas Conselho de Administra√ß√£o e Conselho Fiscal (CA, CF) apresentaram uma rentabilidade m√©dia de 3,0%, consideravelmente inferior √†s demais combina√ß√µes. Essa configura√ß√£o, embora suficiente para atender √†s exig√™ncias m√≠nimas de governan√ßa, pode carecer de um n√≠vel mais profundo de an√°lise e controle, especialmente nas √°reas de auditoria e gest√£o de riscos. A aus√™ncia do Comit√™ de Auditoria, que proporciona maior detalhamento nos processos financeiros e operacionais, pode explicar o desempenho reduzido dessas empresas em compara√ß√£o com as configura√ß√µes mais completas.

Por fim, as empresas que n√£o possuem qualquer estrutura de governan√ßa formal exibiram uma rentabilidade m√©dia negativa de -105,8%, refletindo severas dificuldades financeiras e de gest√£o. Essa aus√™ncia de governan√ßa formal √© um fator cr√≠tico que impacta diretamente a sustentabilidade e a efici√™ncia das opera√ß√µes. A falta de supervis√£o adequada impede o controle de riscos e compromete a capacidade de gerar resultados positivos. Essa situa√ß√£o destaca a import√¢ncia de estruturas de governan√ßa bem implementadas como alicerces para o equil√≠brio e o desempenho financeiro. Em s√≠ntese, o gr√°fico demonstra que a ado√ß√£o de uma governan√ßa corporativa mais abrangente, com foco no alinhamento estrat√©gico e no controle interno, √© um elemento-chave para assegurar a rentabilidade das estatais distritais e sua contribui√ß√£o sustent√°vel para o desenvolvimento regional.

Observa√ß√£o: Instituto BRB e BRB Administradora e Corretora de Seguros n√£o aparecem no gr√°fico pois possuem dados faltantes. Al√©m disso, foram desconsideradas as empresas com patrim√¥nio l√≠quido negativo:

‚Ä¢ CEBGAS - Companhia Brasiliense de G√°s

‚Ä¢ CODEPLAN - Companhia de Planejamento do Distrito Federal

‚Ä¢ EMATER - Empresa de Assist√™ncia T√©cnica e Extens√£o Rural do Distrito Federal

‚Ä¢ SAB - Sociedade de Abastecimento de Bras√≠lia

""")

 # Filtrar os dados apropriados: deve ser de 2023, estado DF, PL positivo e n√£o nulo e lucros n√£o nulos
df_2023 = df[
    (df["Ano"] == 2023) & (df["Estado"] == "DF") & (df["PL"] > 0) & df["lucros"].notna()
].copy()

# Calcular a rentabilidade individual
df_2023["rentabilidade"] = (df_2023["lucros"] / df_2023["PL"]) * 100

# Fun√ß√£o de categoriza√ß√£o de combina√ß√µes de conselhos
def categorizar_combinacoes(row):
    # Verificar e processar gov_ca
    if pd.isna(row["gov_ca"]):
        ca = False
    else:
        ca = str(row["gov_ca"]).strip().upper() == "SIM"
        
    # Verificar e processar gov_cf
    if pd.isna(row["gov_cf"]):
        cf = False
    else:
        cf = str(row["gov_cf"]).strip().upper() == "SIM"
        
    # Verificar e processar gov_aud
    if pd.isna(row["gov_aud"]):
        aud = False
    else:
        aud = str(row["gov_aud"]).strip().upper() == "SIM"

    # Determinar a combina√ß√£o
    if ca and cf and aud:
        return "CA, CF, COAUD"
    elif ca and cf:
        return "CA, CF"
    elif ca and aud:
        return "CA, COAUD"
    elif cf and aud:
        return "CF, COAUD"
    elif ca:
        return "CA"
    elif cf:
        return "CF"
    elif aud:
        return "COAUD"
    else:
        return "Nenhum"

# Aplicar categoriza√ß√£o de forma segura
df_2023["combina√ß√£o"] = df_2023.apply(categorizar_combinacoes, axis=1)

# Agregar e preparar dados
df_agrupado = (
    df_2023.groupby("combina√ß√£o")
    .agg(
        media_rentabilidade=("rentabilidade", "mean"),
        empresas=("emp", lambda x: "<br>".join(x)),
        detalhamento_rentabilidade=(
            "rentabilidade",
            lambda x: "<br>".join([f"{y:.1f}%" for y in x])
        ),
        count=("emp", "count")  # Adicionar contagem de empresas
    )
    .reset_index()
)

# Determinar a cor com base na rentabilidade m√©dia
df_agrupado["cor"] = df_agrupado["media_rentabilidade"].apply(
    lambda x: "#F46045" if x < 0 else "#007acc"
)

# Rela√ß√£o de combina√ß√µes
todas_combinacoes = [
    "CA, CF, COAUD",
    "CA, CF",
    "CA, COAUD",
    "CF, COAUD",
    "CA",
    "CF",
    "COAUD",
    "Nenhum",
]

# Garantir que todas as combina√ß√µes estejam presentes
combinacoes_presentes = df_agrupado["combina√ß√£o"].unique()
combinacoes_faltantes = [c for c in todas_combinacoes if c not in combinacoes_presentes]

# Adicionar combina√ß√µes faltantes
for comb in combinacoes_faltantes:
    # Criar um DataFrame com a nova linha
    nova_linha = pd.DataFrame({
        "combina√ß√£o": [comb],
        "media_rentabilidade": [0],
        "empresas": ["Nenhuma empresa nesta categoria"],
        "detalhamento_rentabilidade": ["N/A"],
        "count": [0],
        "cor": ["#007acc"]  # cor padr√£o para barras sem dados
    })
    
    # Concatenar com o DataFrame existente
    df_agrupado = pd.concat([df_agrupado, nova_linha], ignore_index=True)
# Ordenar pelas combina√ß√µes predefinidas
df_agrupado["ordem"] = df_agrupado["combina√ß√£o"].apply(lambda x: todas_combinacoes.index(x) if x in todas_combinacoes else 999)
df_agrupado = df_agrupado.sort_values("ordem").drop("ordem", axis=1)

# Cria√ß√£o de gr√°fico interativo com Plotly
fig = px.bar(
    df_agrupado,
    x="combina√ß√£o",
    y="media_rentabilidade",
    text="media_rentabilidade",
    color="combina√ß√£o",
    color_discrete_map={row["combina√ß√£o"]: row["cor"] for _, row in df_agrupado.iterrows()},
    labels={
        "media_rentabilidade": "Rentabilidade M√©dia (%)",
        "combina√ß√£o": "Combina√ß√£o de Estruturas de Governan√ßa",
    },
    custom_data=["empresas", "detalhamento_rentabilidade", "count"],
    height=550
)

# Atualizar template de hover
fig.update_traces(
    hovertemplate=(
        "<b>Combina√ß√£o:</b> %{x}<br>"
        "<b>Rentabilidade M√©dia:</b> %{y:.1f}%<br>"
        "<b>N√∫mero de Empresas:</b> %{customdata[2]}<br>"
        "<b>Empresas:</b> <br>%{customdata[0]}<br>"
        "<b>Rentabilidades Individuais:</b> <br>%{customdata[1]}<extra></extra>"
    ),
    texttemplate="%{y:.1f}%",  # Ajustar label de cada barra para porcentagem
    textposition="outside",
    textfont=dict(color="black", size=12)
)

# Adicionar legenda explicativa
fig.add_annotation(
    x=0.5,
    y=1.10,
    xref="paper",
    yref="paper",
    text="Legenda: CA = Conselho de Administra√ß√£o, CF = Conselho Fiscal, COAUD = Comit√™ de Auditoria",
    font=dict(size=11, color="black"),
    showarrow=False,
    align="center"
)

# Ajustar layout final
fig.update_layout(
    xaxis_title="Combina√ß√£o de Estrutura de Governan√ßa",
    yaxis_title="Rentabilidade M√©dia (%)",
    showlegend=False,
    plot_bgcolor="white", 
    paper_bgcolor="white",
    margin=dict(t=70, b=20, l=20, r=20),
    xaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black")
    ),
    yaxis=dict(
        tickfont=dict(color="black"),
        title_font=dict(color="black"),
        zeroline=True,
        zerolinecolor="black",
        zerolinewidth=0.5
    ),
    hoverlabel=dict(
        bgcolor="white",
        font_size=12,
        font_family="Arial",
        font_color="black"
    )
)

# Exibir gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Tabela com dados detalhados
with st.expander("Ver detalhes de rentabilidade por estrutura de governan√ßa"):
    # Criar vers√£o formatada para exibi√ß√£o
    tabela_detalhe = df_agrupado.copy()
    tabela_detalhe["empresas"] = tabela_detalhe["empresas"].str.replace("<br>", ", ")
    tabela_detalhe["detalhamento_rentabilidade"] = tabela_detalhe["detalhamento_rentabilidade"].str.replace("<br>", ", ")
    tabela_detalhe.rename(columns={
        "combina√ß√£o": "Combina√ß√£o",
        "media_rentabilidade": "Rentabilidade M√©dia (%)",
        "empresas": "Empresas",
        "detalhamento_rentabilidade": "Rentabilidades Individuais",
        "count": "N√∫mero de Empresas"
    }, inplace=True)
    
    # Exibir tabela formatada
    st.dataframe(
        tabela_detalhe[["Combina√ß√£o", "N√∫mero de Empresas", "Rentabilidade M√©dia (%)", "Empresas", "Rentabilidades Individuais"]],
        column_config={
            "Rentabilidade M√©dia (%)": st.column_config.NumberColumn(
                "Rentabilidade M√©dia (%)",
                format="%.1f%%"
            )
        },
        hide_index=True,
        use_container_width=True
    )
    
# Bot√£o para voltar √† p√°gina inicial
if st.button("Voltar √† P√°gina Inicial"):
    st.switch_page("In√≠cio.py")