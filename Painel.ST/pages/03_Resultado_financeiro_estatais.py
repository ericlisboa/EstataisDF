# Importando as bibliotecas
import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
import base64
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = r"C:\Users\Eric\OneDrive\Estudos\RBCIP\Estatais\Dashboard\Arquivos VS Code\BD_Completo_Nacional_Formatado.csv"
df = pd.read_csv(file_path)

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Qual o resultado financeiro das estatais?",
    page_icon="üìà",
    layout="wide"
)

st.header("Qual o resultado financeiro das estatais?", divider="red")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

Entre 2020 e 2023, os resultados financeiros das empresas estatais do Distrito Federal evidenciaram oscila√ß√µes relevantes, com predomin√¢ncia de empresas lucrativas em tr√™s dos quatro anos analisados, mas registrando per√≠odos de piora em 2021 e 2023. 

Enquanto 2020 e 2022 foram marcados por maior propor√ß√£o de resultados positivos, reflexo de esfor√ßos em efici√™ncia operacional e recupera√ß√£o econ√¥mica, 2021 destacou-se pelo aumento expressivo de preju√≠zos, particularmente nos setores de transporte p√∫blico, saneamento e assist√™ncia t√©cnica agropecu√°ria. 

Esse desempenho negativo pode ser associado aos impactos prolongados da pandemia de COVID-19, que comprometeram a demanda por servi√ßos, elevaram custos operacionais e atrasaram investimentos estrat√©gicos, especialmente em setores dependentes de subs√≠dios governamentais.

Em 2023, embora mais da metade das estatais tenham registrado lucro, houve um aumento na propor√ß√£o de empresas deficit√°rias, refletindo desafios estruturais e custos crescentes em setores historicamente vulner√°veis. Essa evolu√ß√£o demonstra que, al√©m dos efeitos remanescentes da crise sanit√°ria, fatores econ√¥micos e setoriais, como press√£o inflacion√°ria e limita√ß√µes regulat√≥rias, continuam a impactar o desempenho financeiro. 

O comportamento financeiro ao longo do per√≠odo refor√ßa a necessidade de aprimorar a governan√ßa corporativa, analisar as causas estruturais de preju√≠zos e implementar estrat√©gias voltadas √† efici√™ncia, garantindo a sustentabilidade das estatais, especialmente nas √°reas mais expostas a press√µes externas e dependentes de pol√≠ticas p√∫blicas.

""")	

st.subheader("Distribui√ß√£o anual das empresas em rela√ß√£o ao lucro ou preju√≠zo", divider="red")

st.subheader(":red[**Ano de 2023**]")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O ano de 2023 apresentou uma leve piora em rela√ß√£o ao ano anterior, com 61,54% das estatais registrando lucro e 38,46% operando com preju√≠zo. Essa mudan√ßa sugere a exist√™ncia de desafios persistentes, possivelmente relacionados a press√µes macroecon√¥micas, aumento de custos operacionais e limita√ß√µes no modelo de financiamento de empresas dependentes. 

Setores tradicionalmente deficit√°rios continuam a impactar negativamente os resultados agregados, refor√ßando a import√¢ncia de uma abordagem mais estruturada para equilibrar sustentabilidade financeira e a presta√ß√£o de servi√ßos essenciais.
""")	

# Filtrar o dataset para obter empresas localizadas no Distrito Federal (DF) para o ano de 2023
df_df = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)].copy()

# Classificar as empresas como "Lucro" ou "Preju√≠zo"
df_df["Resultado"] = df_df["lucros"].apply(lambda x: "Lucro" if x > 0 else "Preju√≠zo")

# Calcular o total de empresas
total_empresas = len(df_df)

# Contar a quantidade de empresas com lucro e preju√≠zo
df_resultado = df_df["Resultado"].value_counts().reset_index()
df_resultado.columns = ["Resultado", "Quantidade"]

# Calcular percentuais
df_resultado["Percentual"] = (df_resultado["Quantidade"] / total_empresas * 100).round(2)

# Adicionar coluna de empresas para exibir no hover
resultado_empresas = df_df.groupby("Resultado")["emp"].apply(list).reset_index()
df_merge = pd.merge(df_resultado, resultado_empresas, on="Resultado")
df_merge["Empresas"] = df_merge["emp"].apply(lambda x: "<br>- " + "<br>- ".join(x))

# Definir cores
colors = {"Lucro": "#007acc", "Preju√≠zo": "#F45046"}

# Plotar gr√°fico de pizza interativo com Plotly
fig = px.pie(
    df_resultado,
    values="Quantidade",
    names="Resultado",
    color="Resultado",
    color_discrete_map=colors,
    title="Distribui√ß√£o de Empresas Estatais do DF em 2023",
    hover_data=["Percentual"],
    labels={"Resultado": "Resultado Financeiro", "Quantidade": "N√∫mero de Empresas"},
)

# Personalizar o layout
fig.update_traces(
    textposition="inside", 
    textinfo="percent+label",
    textfont_size=14,
    textfont_color="white",
    pull=[0, 0.1],  # Destaca a fatia "Preju√≠zo"
    marker=dict(line=dict(color="white", width=2)),
    hovertemplate="<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{customdata[0]:.2f}%"
)

# Melhorar a apar√™ncia do gr√°fico
fig.update_layout(
    title={
        "text": "<b>Resultado Financeiro das Estatais do DF em 2023</b>",
        "y": 0.95,
        "x": 0.5,
        "xanchor": "center",
        "yanchor": "top",
        "font": {"size": 20}
    },
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.2,
        xanchor="center",
        x=0.5
    ),
    font=dict(size=14),
    margin=dict(t=80, b=80),
    height=500,
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Mostrar detalhes das empresas em cada categoria
col1, col2 = st.columns(2)

with col1:
    empresas_lucro = df_df[df_df["Resultado"] == "Lucro"]["emp"].tolist()
    if empresas_lucro:
        st.info(f"**Empresas com Lucro ({len(empresas_lucro)}):**")
        for empresa in sorted(empresas_lucro):
            st.write(f"- {empresa}")
    else:
        st.info("Nenhuma empresa com lucro encontrada.")

with col2:
    empresas_prejuizo = df_df[df_df["Resultado"] == "Preju√≠zo"]["emp"].tolist()
    if empresas_prejuizo:
        st.error(f"**Empresas com Preju√≠zo ({len(empresas_prejuizo)}):**")
        for empresa in sorted(empresas_prejuizo):
            st.write(f"- {empresa}")
    else:
        st.error("Nenhuma empresa com preju√≠zo encontrada.")

# Mostrar tabela com valores detalhados (opcional)
with st.expander("Ver dados detalhados de lucro/preju√≠zo", expanded=False):
    # Criar um dataframe com as estat√≠sticas para exibi√ß√£o
    df_detalhe = df_df[["emp", "lucros"]].sort_values(by="lucros", ascending=False).copy()
    df_detalhe.columns = ["Empresa", "Resultado Financeiro (R$)"]
    
    # Exibir a tabela formatada
    st.dataframe(
        df_detalhe,
        column_config={
            "Resultado Financeiro (R$)": st.column_config.NumberColumn(
                "Resultado Financeiro (R$)",
                format="R$ %.2f"
            )
        },
        hide_index=True,
        use_container_width=True
    )

st.subheader(":red[**Ano de 2022**]")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

Em 2022, houve uma recupera√ß√£o significativa no desempenho financeiro das estatais, com 69,23% das empresas apresentando lucro e apenas 30,77% registrando preju√≠zo. Esse aumento na propor√ß√£o de empresas lucrativas pode ser atribu√≠do a uma recupera√ß√£o econ√¥mica mais ampla, combinada com esfor√ßos para melhorar a efici√™ncia operacional e a governan√ßa das estatais. 

O desempenho positivo de setores estrat√©gicos, como financeiro e energia, foi crucial para esse resultado. Este per√≠odo reflete o impacto de pol√≠ticas p√∫blicas e ajustes internos que permitiram maior estabilidade financeira.

""")	

# Filtrar o dataset para obter empresas localizadas no Distrito Federal (DF) para o ano de 2022
df_2022 = df[(df["Estado"] == "DF") & (df["Ano"] == 2022)].copy()

# Verificar se h√° dados para processar
if len(df_2022) == 0:
    st.warning("N√£o h√° dados de empresas para o DF no ano de 2022.")
else:
    # Classificar as empresas como "Lucro" ou "Preju√≠zo"
    df_2022["Resultado"] = df_2022["lucros"].apply(
        lambda x: "Lucro" if x > 0 else "Preju√≠zo"
    )
    
    # Calcular o total de empresas
    total_empresas = len(df_2022)
    
    # Contar a quantidade de empresas com lucro e preju√≠zo
    df_resultado_2022 = df_2022["Resultado"].value_counts().reset_index()
    df_resultado_2022.columns = ["Resultado", "Quantidade"]
    
    # Calcular percentuais
    df_resultado_2022["Percentual"] = (df_resultado_2022["Quantidade"] / total_empresas * 100).round(2)
    
    # Definir cores
    colors = {"Lucro": "#007acc", "Preju√≠zo": "#F45046"}
    
    # Plotar gr√°fico de pizza interativo com Plotly
    fig = px.pie(
        df_resultado_2022,
        values="Quantidade",
        names="Resultado",
        color="Resultado",
        color_discrete_map=colors,
        title="Distribui√ß√£o de Empresas Estatais do DF em 2022",
        hover_data=["Percentual"],
        labels={"Resultado": "Resultado Financeiro", "Quantidade": "N√∫mero de Empresas"},
    )
    
    # Personalizar o layout
    fig.update_traces(
        textposition="inside", 
        textinfo="percent+label",
        textfont_size=14,
        textfont_color="white",
        pull=[0, 0.1],  # Destaca a fatia "Preju√≠zo"
        marker=dict(line=dict(color="white", width=2)),
        hovertemplate="<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{customdata[0]:.2f}%"
    )
    
    # Melhorar a apar√™ncia do gr√°fico
    fig.update_layout(
        title={
            "text": "<b>Resultado Financeiro das Estatais do DF em 2022</b>",
            "y": 0.95,
            "x": 0.5,
            "xanchor": "center",
            "yanchor": "top",  # Corrigindo a aspas de fechamento faltante
            "font": {"size": 20}
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        font=dict(size=14),
        margin=dict(t=80, b=80),
        height=500,
    )
    
    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar detalhes das empresas em cada categoria
    col1, col2 = st.columns(2)
    
    with col1:
        empresas_lucro = df_2022[df_2022["Resultado"] == "Lucro"]["emp"].tolist()
        if empresas_lucro:
            st.info(f"**Empresas com Lucro ({len(empresas_lucro)}):**")
            for empresa in sorted(empresas_lucro):
                st.write(f"- {empresa}")
        else:
            st.info("Nenhuma empresa com lucro encontrada.")
    
    with col2:
        empresas_prejuizo = df_2022[df_2022["Resultado"] == "Preju√≠zo"]["emp"].tolist()
        if empresas_prejuizo:
            st.error(f"**Empresas com Preju√≠zo ({len(empresas_prejuizo)}):**")
            for empresa in sorted(empresas_prejuizo):
                st.write(f"- {empresa}")
        else:
            st.error("Nenhuma empresa com preju√≠zo encontrada.")
    
    # Mostrar tabela com valores detalhados (opcional)
    with st.expander("Ver dados detalhados de lucro/preju√≠zo", expanded=False):
        # Criar um dataframe com as estat√≠sticas para exibi√ß√£o
        df_detalhe = df_2022[["emp", "lucros"]].sort_values(by="lucros", ascending=False).copy()
        df_detalhe.columns = ["Empresa", "Resultado Financeiro (R$)"]
        
        # Exibir a tabela formatada
        st.dataframe(
            df_detalhe,
            column_config={
                "Resultado Financeiro (R$)": st.column_config.NumberColumn(
                    "Resultado Financeiro (R$)",
                    format="R$ %.2f"
                )
            },
            hide_index=True,
            use_container_width=True
        )

st.subheader(":red[**Ano de 2021**]")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O ano de 2021 trouxe uma invers√£o preocupante no panorama, com 57,69% das estatais apresentando preju√≠zo, enquanto apenas 42,31% registraram lucro. Essa mudan√ßa pode estar relacionada aos impactos prolongados da pandemia e √† recupera√ß√£o econ√¥mica ainda lenta em setores-chave. Empresas dependentes de subs√≠dios governamentais, como transporte p√∫blico e assist√™ncia t√©cnica agropecu√°ria, enfrentaram maior press√£o financeira. 

Este ano destacou a import√¢ncia de estrat√©gias de mitiga√ß√£o de riscos e revis√£o de modelos operacionais para melhorar a sustentabilidade das opera√ß√µes.

""")	

# Filtrar o dataset para obter empresas localizadas no Distrito Federal (DF) para o ano de 2021
df_2021 = df[(df["Estado"] == "DF") & (df["Ano"] == 2021)].copy()

# Verificar se h√° dados para processar
if len(df_2021) == 0:
    st.warning("N√£o h√° dados de empresas para o DF no ano de 2021.")
else:
    # Classificar as empresas como "Lucro" ou "Preju√≠zo"
    df_2021["Resultado"] = df_2021["lucros"].apply(
        lambda x: "Lucro" if x > 0 else "Preju√≠zo"
    )
    
    # Calcular o total de empresas
    total_empresas = len(df_2021)
    
    # Contar a quantidade de empresas com lucro e preju√≠zo
    df_resultado_2021 = df_2021["Resultado"].value_counts().reset_index()
    df_resultado_2021.columns = ["Resultado", "Quantidade"]
    
    # Calcular percentuais
    df_resultado_2021["Percentual"] = (df_resultado_2021["Quantidade"] / total_empresas * 100).round(2)
    
    # Definir cores
    colors = {"Lucro": "#007acc", "Preju√≠zo": "#F45046"}
    
    # Plotar gr√°fico de pizza interativo com Plotly
    fig = px.pie(
        df_resultado_2021,
        values="Quantidade",
        names="Resultado",
        color="Resultado",
        color_discrete_map=colors,
        title="Distribui√ß√£o de Empresas Estatais do DF em 2021",
        hover_data=["Percentual"],
        labels={"Resultado": "Resultado Financeiro", "Quantidade": "N√∫mero de Empresas"},
    )
    
    # Personalizar o layout
    fig.update_traces(
        textposition="inside", 
        textinfo="percent+label",
        textfont_size=14,
        textfont_color="white",
        pull=[0, 0.1],  # Destaca a fatia "Preju√≠zo"
        marker=dict(line=dict(color="white", width=2)),
        hovertemplate="<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{customdata[0]:.2f}%"
    )
    
    # Melhorar a apar√™ncia do gr√°fico
    fig.update_layout(
        title={
            "text": "<b>Resultado Financeiro das Estatais do DF em 2021</b>",
            "y": 0.95,
            "x": 0.5,
            "xanchor": "center",
            "yanchor": "top",
            "font": {"size": 20}
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        font=dict(size=14),
        margin=dict(t=80, b=80),
        height=500,
    )
    
    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar detalhes das empresas em cada categoria
    col1, col2 = st.columns(2)
    
    with col1:
        empresas_lucro = df_2021[df_2021["Resultado"] == "Lucro"]["emp"].tolist()
        if empresas_lucro:
            st.info(f"**Empresas com Lucro ({len(empresas_lucro)}):**")
            for empresa in sorted(empresas_lucro):
                st.write(f"- {empresa}")
        else:
            st.info("Nenhuma empresa com lucro encontrada.")
    
    with col2:
        empresas_prejuizo = df_2021[df_2021["Resultado"] == "Preju√≠zo"]["emp"].tolist()
        if empresas_prejuizo:
            st.error(f"**Empresas com Preju√≠zo ({len(empresas_prejuizo)}):**")
            for empresa in sorted(empresas_prejuizo):
                st.write(f"- {empresa}")
        else:
            st.error("Nenhuma empresa com preju√≠zo encontrada.")
    
    # Mostrar tabela com valores detalhados (opcional)
    with st.expander("Ver dados detalhados de lucro/preju√≠zo", expanded=False):
        # Criar um dataframe com as estat√≠sticas para exibi√ß√£o
        df_detalhe = df_2021[["emp", "lucros"]].sort_values(by="lucros", ascending=False).copy()
        df_detalhe.columns = ["Empresa", "Resultado Financeiro (R$)"]
        
        # Exibir a tabela formatada
        st.dataframe(
            df_detalhe,
            column_config={
                "Resultado Financeiro (R$)": st.column_config.NumberColumn(
                    "Resultado Financeiro (R$)",
                    format="R$ %.2f"
                )
            },
            hide_index=True,
            use_container_width=True
        )

st.subheader(":red[**Ano de 2020**]")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

No ano de 2020, 63,64% das empresas registraram lucro, enquanto 36,36% operaram com preju√≠zo. Esse resultado reflete um equil√≠brio financeiro, com a maioria das estatais apresentando resultados positivos, mesmo diante do impacto inicial da pandemia de COVID-19. Esse cen√°rio pode ser explicado pelo desempenho robusto de setores como financeiro e imobili√°rio, que se destacaram pela resili√™ncia em meio √†s incertezas econ√¥micas. 

Entretanto, os resultados deficit√°rios de uma parcela das empresas sugerem a necessidade de aten√ß√£o em setores mais vulner√°veis, como transporte e saneamento.

""")	

# Filtrar o dataset para obter empresas localizadas no Distrito Federal (DF) para o ano de 2020
df_2020 = df[(df["Estado"] == "DF") & (df["Ano"] == 2020)].copy()

# Verificar se h√° dados para processar
if len(df_2020) == 0:
    st.warning("N√£o h√° dados de empresas para o DF no ano de 2020.")
else:
    # Classificar as empresas como "Lucro" ou "Preju√≠zo"
    df_2020["Resultado"] = df_2020["lucros"].apply(
        lambda x: "Lucro" if x > 0 else "Preju√≠zo"
    )
    
    # Calcular o total de empresas
    total_empresas = len(df_2020)
    
    # Contar a quantidade de empresas com lucro e preju√≠zo
    df_resultado_2020 = df_2020["Resultado"].value_counts().reset_index()
    df_resultado_2020.columns = ["Resultado", "Quantidade"]
    
    # Calcular percentuais
    df_resultado_2020["Percentual"] = (df_resultado_2020["Quantidade"] / total_empresas * 100).round(2)
    
    # Definir cores
    colors = {"Lucro": "#007acc", "Preju√≠zo": "#F45046"}
    
    # Plotar gr√°fico de pizza interativo com Plotly
    fig = px.pie(
        df_resultado_2020,
        values="Quantidade",
        names="Resultado",
        color="Resultado",
        color_discrete_map=colors,
        title="Distribui√ß√£o de Empresas Estatais do DF em 2020",
        hover_data=["Percentual"],
        labels={"Resultado": "Resultado Financeiro", "Quantidade": "N√∫mero de Empresas"},
    )
    
    # Personalizar o layout
    fig.update_traces(
        textposition="inside", 
        textinfo="percent+label",
        textfont_size=14,
        textfont_color="white",
        pull=[0, 0.1],  # Destaca a fatia "Preju√≠zo"
        marker=dict(line=dict(color="white", width=2)),
        hovertemplate="<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{customdata[0]:.2f}%"
    )
    
    # Melhorar a apar√™ncia do gr√°fico
    fig.update_layout(
        title={
            "text": "<b>Resultado Financeiro das Estatais do DF em 2020</b>",
            "y": 0.95,
            "x": 0.5,
            "xanchor": "center",
            "yanchor": "top",
            "font": {"size": 20}
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        font=dict(size=14),
        margin=dict(t=80, b=80),
        height=500,
    )
    
    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar detalhes das empresas em cada categoria
    col1, col2 = st.columns(2)
    
    with col1:
        empresas_lucro = df_2020[df_2020["Resultado"] == "Lucro"]["emp"].tolist()
        if empresas_lucro:
            st.info(f"**Empresas com Lucro ({len(empresas_lucro)}):**")
            for empresa in sorted(empresas_lucro):
                st.write(f"- {empresa}")
        else:
            st.info("Nenhuma empresa com lucro encontrada.")
    
    with col2:
        empresas_prejuizo = df_2020[df_2020["Resultado"] == "Preju√≠zo"]["emp"].tolist()
        if empresas_prejuizo:
            st.error(f"**Empresas com Preju√≠zo ({len(empresas_prejuizo)}):**")
            for empresa in sorted(empresas_prejuizo):
                st.write(f"- {empresa}")
        else:
            st.error("Nenhuma empresa com preju√≠zo encontrada.")
    
    # Mostrar tabela com valores detalhados (opcional)
    with st.expander("Ver dados detalhados de lucro/preju√≠zo", expanded=False):
        # Criar um dataframe com as estat√≠sticas para exibi√ß√£o
        df_detalhe = df_2020[["emp", "lucros"]].sort_values(by="lucros", ascending=False).copy()
        df_detalhe.columns = ["Empresa", "Resultado Financeiro (R$)"]
        
        # Exibir a tabela formatada
        st.dataframe(
            df_detalhe,
            column_config={
                "Resultado Financeiro (R$)": st.column_config.NumberColumn(
                    "Resultado Financeiro (R$)",
                    format="R$ %.2f"
                )
            },
            hide_index=True,
            use_container_width=True
        )

# Ap√≥s todos os gr√°ficos, adicionar uma an√°lise comparativa entre os anos
st.subheader("Evolu√ß√£o dos Resultados Financeiros (2020-2023)", divider="red")

# Criar um dataframe resumindo a evolu√ß√£o ao longo dos anos
anos = [2020, 2021, 2022, 2023]
dados_anos = []

for ano in anos:
    df_ano = df[(df["Estado"] == "DF") & (df["Ano"] == ano)].copy()
    if len(df_ano) > 0:
        lucro_count = len(df_ano[df_ano["lucros"] > 0])
        prejuizo_count = len(df_ano[df_ano["lucros"] <= 0])
        total = len(df_ano)
        dados_anos.append({
            "Ano": ano,
            "Empresas com Lucro": lucro_count,
            "Empresas com Preju√≠zo": prejuizo_count,
            "% Lucro": round((lucro_count/total*100), 2),  # Usando a fun√ß√£o round() em vez do m√©todo
            "% Preju√≠zo": round((prejuizo_count/total*100), 2)  # Usando a fun√ß√£o round() em vez do m√©todo
        })

# Criar dataframe para visualiza√ß√£o
df_evolucao = pd.DataFrame(dados_anos)

# Criar gr√°fico de linhas para mostrar a evolu√ß√£o
fig_evolucao = px.line(
    df_evolucao,
    x="Ano",
    y=["% Lucro", "% Preju√≠zo"],
    title="Evolu√ß√£o Percentual das Empresas com Lucro e Preju√≠zo (2020-2023)",
    labels={"value": "Percentual (%)", "variable": "Resultado"},
    color_discrete_map={"% Lucro": "#007acc", "% Preju√≠zo": "#F45046"},
    markers=True
)

# Personalizar o layout
fig_evolucao.update_layout(
    xaxis=dict(dtick=1),  # Mostrar todos os anos
    yaxis=dict(range=[0, 100]),
    legend_title_text="",
    hovermode="x unified",
    font=dict(size=14),
    height=450
)

# Exibir o gr√°fico de evolu√ß√£o
st.plotly_chart(fig_evolucao, use_container_width=True)

# Mostrar tabela resumo
st.markdown("### Resumo dos Resultados por Ano")

# Formatando o dataframe para exibi√ß√£o
df_exibir = df_evolucao.copy()
df_exibir["% Lucro"] = df_exibir["% Lucro"].map(lambda x: f"{x:.2f}%")
df_exibir["% Preju√≠zo"] = df_exibir["% Preju√≠zo"].map(lambda x: f"{x:.2f}%")

# Exibir tabela formatada
st.dataframe(
    df_exibir,
    column_config={
        "Ano": st.column_config.NumberColumn("Ano"),
        "Empresas com Lucro": st.column_config.NumberColumn("Empresas com Lucro"),
        "Empresas com Preju√≠zo": st.column_config.NumberColumn("Empresas com Preju√≠zo"),
        "% Lucro": st.column_config.TextColumn("% Lucro"),
        "% Preju√≠zo": st.column_config.TextColumn("% Preju√≠zo")
    },
    hide_index=True,
    use_container_width=True
)


st.subheader("Rela√ß√£o entre Lucro ou Preju√≠zo e o Patrim√¥nio L√≠quido em 2023", divider="red")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo demonstra a rela√ß√£o entre o lucro ou preju√≠zo das empresas estatais do Distrito Federal e seus respectivos patrim√¥nios l√≠quidos em 2023. Essa an√°lise √© essencial para avaliar a efici√™ncia das empresas em gerar resultados financeiros positivos a partir de seus recursos patrimoniais. Empresas com maior patrim√¥nio l√≠quido tendem a ter maior capacidade de alavancagem operacional e financeira, o que deveria, em teoria, traduzir-se em lucros consistentes. No entanto, os resultados apresentados revelam uma diversidade significativa de desempenhos, com algumas empresas altamente lucrativas e outras registrando preju√≠zos, independentemente do tamanho de seus patrim√¥nios.

Observa-se que as empresas com patrim√¥nios l√≠quidos elevados, representadas por pontos no extremo direito do gr√°fico, em sua maioria apresentam lucros consistentes. Este √© o caso de empresas do setor financeiro e energ√©tico, que, devido √† natureza de suas opera√ß√µes e √† estrutura de governan√ßa robusta, conseguem maximizar a efici√™ncia no uso de seus recursos patrimoniais. A rela√ß√£o positiva entre patrim√¥nio l√≠quido e lucro nessas empresas refor√ßa a import√¢ncia de uma gest√£o estrat√©gica orientada para resultados, com foco na otimiza√ß√£o de receitas e controle de custos.

Por outro lado, √© preocupante notar a presen√ßa de empresas com patrim√¥nio l√≠quido reduzido e preju√≠zos recorrentes, marcadas por pontos no quadrante inferior esquerdo do gr√°fico. Esses casos, muitas vezes associados a setores como transporte p√∫blico e assist√™ncia t√©cnica agropecu√°ria, evidenciam desafios estruturais significativos. As limita√ß√µes na gera√ß√£o de receitas pr√≥prias, aliadas a custos operacionais elevados e depend√™ncia de subs√≠dios governamentais, dificultam a sustentabilidade financeira dessas organiza√ß√µes. Al√©m disso, a gest√£o de empresas com patrim√¥nios l√≠quidos negativos merece aten√ß√£o especial, pois representa um risco fiscal para o Governo do Distrito Federal, sendo necess√°rio avaliar medidas de reestrutura√ß√£o e melhoria operacional.

A an√°lise refor√ßa a import√¢ncia de uma governan√ßa corporativa s√≥lida e de estrat√©gias diferenciadas para setores mais vulner√°veis. A implementa√ß√£o de pr√°ticas de gest√£o eficientes, associada ao controle rigoroso dos custos e √† diversifica√ß√£o de receitas, √© essencial para alinhar o desempenho financeiro das empresas ao potencial representado por seus patrim√¥nios l√≠quidos. Em √∫ltima an√°lise, o gr√°fico destaca a necessidade de interven√ß√µes estrat√©gicas em empresas defi

""")	

# Filtrar o dataset e garantir a ordem correta dos dados
df_filtered = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)].copy()

# Verificar a consist√™ncia removendo nulos e resetando o √≠ndice
df_filtered_clean = df_filtered.dropna(subset=["lucros", "PL"]).reset_index(drop=True)

# Adicionar colunas para formata√ß√£o e exibi√ß√£o
df_filtered_clean["Status"] = df_filtered_clean["lucros"].apply(
    lambda lucro: "Lucro" if lucro > 0 else "Preju√≠zo"
)

# Adicionar informa√ß√£o de depend√™ncia para o hover
df_filtered_clean["Depend√™ncia"] = df_filtered_clean["dep"].apply(
    lambda x: "Dependente" if str(x).upper() == "DEPENDENTE" else "N√£o Dependente"
)

# Criar o gr√°fico de dispers√£o interativo
fig = px.scatter(
    df_filtered_clean,
    x="PL",
    y="lucros",
    color="Status",
    size=df_filtered_clean["PL"].abs() / df_filtered_clean["PL"].abs().max() * 50 + 10,  
    labels={
        "PL": "Patrim√¥nio L√≠quido (R$)",
        "lucros": "Lucro/Preju√≠zo (R$)",
        "Status": "Resultado",
        "size": "Tamanho"
    },
    color_discrete_map={
        "Lucro": "#007acc",
        "Preju√≠zo": "#F45046",
    },
    hover_name="emp",
    hover_data={
        "Status": True,
        "PL": ":,.2f",
        "lucros": ":,.2f",
        "Depend√™ncia": True,
    },
    title="Rela√ß√£o entre Patrim√¥nio L√≠quido e Resultado Financeiro das Estatais do DF (2023)"
)

# Configurar hovertemplate para garantir formata√ß√£o correta
fig.update_traces(
    hovertemplate=(
        "<b>%{hovertext}</b><br>"
        "Status: %{customdata[0]}<br>"
        "Depend√™ncia: %{customdata[3]}<br>"
        "Patrim√¥nio L√≠quido: R$ %{customdata[1]:,.2f}<br>"
        "Resultado: R$ %{customdata[2]:,.2f}<extra></extra>"
    ),
    marker=dict(
        line=dict(width=1, color="DarkSlateGray")
    ),
)

# Atualizar layout com melhorias nos textos e legenda
fig.update_layout(
    xaxis=dict(
        title=dict(
            text="Patrim√¥nio L√≠quido (R$)",
            font=dict(size=16, color="black")
        ),
        tickfont=dict(size=14, color="black"),
        gridcolor="lightgray"
    ),
    yaxis=dict(
        title=dict(
            text="Lucro/Preju√≠zo (R$)",
            font=dict(size=16, color="black")
        ),
        tickfont=dict(size=14, color="black"),
        gridcolor="lightgray"
    ),
  
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.25,  # Aumentar a dist√¢ncia para evitar sobreposi√ß√£o
        xanchor="center",
        x=0.5,
        font=dict(size=14, color="black"),
        itemsizing="constant",  # Manter tamanho constante dos itens da legenda
        itemwidth=50,  # Largura dos itens da legenda
        borderwidth=1,  # Adicionar borda √† legenda
        bordercolor="lightgray",
        bgcolor="rgba(255, 255, 255, 0.9)"  # Fundo levemente transparente
    ),
    plot_bgcolor="white",
    paper_bgcolor="white",
    height=650,  # Aumentar a altura para acomodar melhor a legenda
    margin=dict(t=80, b=120, l=80, r=40),  # Aumentar margem inferior para a legenda
    hoverlabel=dict(
        bgcolor="white",
        font_size=14,
        font_family="Arial",
        font_color="black"
    ),
    showlegend=True,
)

# Adicionar linha de refer√™ncia no eixo Y=0
fig.add_hline(
    y=0, 
    line_dash="dash", 
    line_color="gray", 
    annotation_text="Linha de Refer√™ncia (Zero)", 
    annotation_position="bottom right",
    annotation_font=dict(size=12, color="black")
)

# Adicionar linha de refer√™ncia no eixo X=0
fig.add_vline(
    x=0, 
    line_dash="dash", 
    line_color="gray", 
    annotation_text="PL Zero", 
    annotation_position="top right",
    annotation_font=dict(size=12, color="black")
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Adicionar informa√ß√µes complementares
with st.expander("Ver detalhes dos dados"):
    # Criar tabela com informa√ß√µes organizadas
    tabela_detalhe = df_filtered_clean[["emp", "PL", "lucros", "Status", "Depend√™ncia"]].sort_values(
        by="PL", ascending=False
    ).copy()
    
    tabela_detalhe.columns = [
        "Empresa", 
        "Patrim√¥nio L√≠quido (R$)", 
        "Resultado Financeiro (R$)", 
        "Status",
        "Depend√™ncia"
    ]
    
    # Exibir tabela formatada
    st.dataframe(
        tabela_detalhe,
        column_config={
            "Patrim√¥nio L√≠quido (R$)": st.column_config.NumberColumn(
                "Patrim√¥nio L√≠quido (R$)",
                format="R$ %.2f"
            ),
            "Resultado Financeiro (R$)": st.column_config.NumberColumn(
                "Resultado Financeiro (R$)",
                format="R$ %.2f"
            ),
        },
        hide_index=True,
        use_container_width=True
    )
    
    # Resumo estat√≠stico
    st.markdown("### Resumo estat√≠stico")
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric(
            "M√©dia de Patrim√¥nio L√≠quido", 
            f"R$ {df_filtered_clean['PL'].mean():,.2f}"
        )
        st.metric(
            "Empresa com maior PL", 
            df_filtered_clean.loc[df_filtered_clean['PL'].idxmax(), 'emp'],
            f"R$ {df_filtered_clean['PL'].max():,.2f}"
        )
    
    with col2:
        st.metric(
            "M√©dia de Lucro/Preju√≠zo", 
            f"R$ {df_filtered_clean['lucros'].mean():,.2f}"
        )
        st.metric(
            "Empresa mais lucrativa", 
            df_filtered_clean.loc[df_filtered_clean['lucros'].idxmax(), 'emp'],
            f"R$ {df_filtered_clean['lucros'].max():,.2f}"
        )


st.subheader("Rentabilidade das empresas em 2023 - (Lucro ou Preju√≠zo / Patrim√¥nio L√≠quido)", divider="red")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo evidencia a rentabilidade das empresas estatais do Distrito Federal em 2023, medida pela rela√ß√£o entre lucro ou preju√≠zo e patrim√¥nio l√≠quido. Empresas como CEB Participa√ß√µes, CEB Lajeado e CAESB destacaram-se com as maiores rentabilidades, demonstrando efici√™ncia na utiliza√ß√£o de seus ativos para gerar retornos financeiros positivos. Esses resultados refletem estrat√©gias de gest√£o s√≥lidas, otimiza√ß√£o de processos operacionais e modelos de neg√≥cios ajustados √† demanda do mercado. O destaque do setor energ√©tico e do saneamento refor√ßa o impacto de servi√ßos essenciais com forte capacidade de gera√ß√£o de receitas, mesmo em um cen√°rio econ√¥mico desafiador.

No entanto, o gr√°fico tamb√©m exp√µe pontos cr√≠ticos relacionados a empresas com rentabilidade negativa, como a DF Gest√£o de Ativos, que apresentou o desempenho mais preocupante, com valores muito abaixo do esperado. Essa baixa rentabilidade pode ser atribu√≠da a uma combina√ß√£o de desafios estruturais, falta de estrat√©gias claras de gera√ß√£o de receita e poss√≠vel subutiliza√ß√£o de ativos. Outras empresas com resultados negativos incluem a CODHAB, o Metr√¥/DF e a CEB Ilumina√ß√£o P√∫blica e Servi√ßos, setores historicamente desafiadores, dada sua depend√™ncia de subs√≠dios governamentais e altos custos operacionais. Esses desempenhos deficit√°rios destacam a necessidade de reavalia√ß√µes estrat√©gicas, redu√ß√£o de inefici√™ncias e implementa√ß√£o de melhorias na gest√£o.

A an√°lise geral revela um panorama de contraste entre empresas altamente rent√°veis e aquelas em dificuldades financeiras, refor√ßando a necessidade de pol√≠ticas diferenciadas para cada caso. Empresas com bom desempenho devem continuar investindo na amplia√ß√£o de suas opera√ß√µes e inova√ß√£o, enquanto aquelas com rentabilidade negativa requerem interven√ß√µes espec√≠ficas, como reestrutura√ß√£o, diversifica√ß√£o de receitas e maior efici√™ncia nos custos operacionais. Esses ajustes s√£o essenciais para garantir a sustentabilidade e o impacto positivo das estatais no desenvolvimento econ√¥mico e social do Distrito Federal.

Alguns pontos adicionais que complementam a an√°lise sist√™mica das empresas:

I. Disparidade na Rentabilidade: O gr√°fico mostra uma disparidade acentuada entre empresas com alta rentabilidade e aquelas com resultados negativos. Essa diferen√ßa destaca a necessidade de aprofundar a an√°lise das pol√≠ticas setoriais e dos modelos de gest√£o. Empresas de setores essenciais, como transporte e habita√ß√£o, muitas vezes operam com foco em atender pol√≠ticas p√∫blicas, o que pode impactar negativamente sua rentabilidade, mas refor√ßa sua relev√¢ncia social. Esse trade-off entre sustentabilidade financeira e impacto social deve ser avaliado de forma integrada.

II. Impacto Setorial e Subs√≠dios: Empresas de setores como transporte e habita√ß√£o (e.g., Metr√¥/DF, CODHAB) enfrentam desafios estruturais decorrentes de sua depend√™ncia de subs√≠dios governamentais e press√£o para manter tarifas acess√≠veis. Essa condi√ß√£o pode justificar parcialmente os resultados negativos, mas refor√ßa a necessidade de buscar alternativas sustent√°veis, como parcerias p√∫blico-privadas (PPPs), moderniza√ß√£o tecnol√≥gica e revis√£o de custos operacionais.

III. Governan√ßa e Impacto nos Resultados: Um ponto que merece destaque √© o papel da governan√ßa corporativa na determina√ß√£o desses resultados. Empresas com estrutura de governan√ßa mais robusta tendem a apresentar maior capacidade de adapta√ß√£o √†s press√µes econ√¥micas e regulat√≥rias, o que pode explicar o desempenho positivo de algumas estatais, como as do setor energ√©tico. Investir no fortalecimento da governan√ßa, especialmente nas empresas deficit√°rias, pode ser uma estrat√©gia para melhorar seus resultados financeiros.

Instituto BRB e BRB Administradora e Corretora de Seguros n√£o aparecem no gr√°fico pois possuem dados faltantes. Al√©m disso, foram desconsideradas as empresas com patrim√¥nio l√≠quido negativo:

CEBGAS - Companhia Brasiliense de G√°s

CODEPLAN - Companhia de Planejamento do Distrito Federal

EMATER - Empresa de Assist√™ncia T√©cnica e Extens√£o Rural do Distrito Federal

SAB - Sociedade de Abastecimento de Bras√≠lia

""")	

# Filtrar o dataframe para incluir apenas o Estado DF e Ano 2023
df_filtered = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)].copy()

# Remover linhas com valores NaN nas colunas necess√°rias e PL negativo
df_filtered = df_filtered.dropna(subset=["lucros", "PL"])
df_filtered = df_filtered[df_filtered["PL"] > 0]  # Remover empresas com PL negativo ou zero

# Calcular Rentabilidade (%)
df_filtered["Rentabilidade (%)"] = (df_filtered["lucros"] / df_filtered["PL"]) * 100

# Adicionar uma coluna para indicar se √© lucro ou preju√≠zo
df_filtered["Status"] = df_filtered["Rentabilidade (%)"].apply(
    lambda x: "Rentabilidade Positiva" if x >= 0 else "Rentabilidade Negativa"
)

# Ordenar o dataframe pela rentabilidade
df_filtered.sort_values(by="Rentabilidade (%)", ascending=True, inplace=True)

# Adicionar informa√ß√£o de depend√™ncia para o hover
df_filtered["Depend√™ncia"] = df_filtered["dep"].apply(
    lambda x: "Dependente" if str(x).upper() == "DEPENDENTE" else "N√£o Dependente"
)

# Cria√ß√£o do gr√°fico de barras
fig = px.bar(
    df_filtered,
    x="Rentabilidade (%)",
    y="emp",
    orientation="h",
    color="Status",
    color_discrete_map={
        "Rentabilidade Positiva": "#007acc", 
        "Rentabilidade Negativa": "#F45046"
    },
    hover_data={
        "Rentabilidade (%)": ":.2f", 
        "lucros": ":,.2f", 
        "PL": ":,.2f",
        "Depend√™ncia": True,
        "Status": False
    },
    labels={
        "emp": "Empresa", 
        "Rentabilidade (%)": "Rentabilidade (%)",
        "lucros": "Lucro/Preju√≠zo (R$)",
        "PL": "Patrim√¥nio L√≠quido (R$)"
    },
    title="Rentabilidade das Empresas Estatais do DF em 2023",
    text="Rentabilidade (%)"  # Adicionar valor da rentabilidade em cada barra
)

# Personalizar o texto nas barras
fig.update_traces(
    texttemplate="%{x:.1f}%",
    textposition="outside",
    textfont=dict(size=12, color="black"),
    cliponaxis=False,  # Permitir que o texto seja exibido fora do eixo
)

# Formatando o hovertemplate para exibir valores de forma mais amig√°vel
fig.update_traces(
    hovertemplate=(
        "<b>%{y}</b><br>"
        "Rentabilidade: %{x:.2f}%<br>"
        "Lucro/Preju√≠zo: R$ %{customdata[0]:,.2f}<br>"
        "Patrim√¥nio L√≠quido: R$ %{customdata[1]:,.2f}<br>"
        "Depend√™ncia: %{customdata[2]}<extra></extra>"
    )
)

# Linha de refer√™ncia em 0%
fig.add_vline(
    x=0, 
    line_dash="dash", 
    line_color="gray",
    annotation_text="Linha de Rentabilidade Zero",
    annotation_position="top"
)

# Melhorar o layout do gr√°fico
fig.update_layout(
    height=650,  # Altura adaptativa com base no n√∫mero de empresas
    plot_bgcolor="white",
    paper_bgcolor="white",
    title={
        "text": "<b>Rentabilidade das Empresas Estatais do DF em 2023</b>",
        "y": 0.98,
        "x": 0.5,
        "xanchor": "center",
        "yanchor": "top",
        "font": {"size": 20, "color": "black"}
    },
    xaxis=dict(
        title=dict(text="Rentabilidade (%)", font=dict(size=14, color="black")),
        tickfont=dict(size=12, color="black"),
        gridcolor="lightgray",
        zerolinecolor="black",
        zerolinewidth=1.5
    ),
    yaxis=dict(
        title=dict(text="Empresa", font=dict(size=14, color="black")),
        tickfont=dict(size=12, color="black"),
        gridcolor="white"
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.15,
        xanchor="center",
        x=0.5,
        font=dict(size=12, color="black"),
        borderwidth=1,
        bordercolor="lightgray"
    ),
    margin=dict(l=50, r=50, t=80, b=80)
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Adicionar informa√ß√µes complementares
with st.expander("üìä Ver detalhes da rentabilidade"):
    # Calcular estat√≠sticas
    media_rentabilidade = df_filtered["Rentabilidade (%)"].mean()
    rentabilidade_positiva = df_filtered[df_filtered["Rentabilidade (%)"] > 0]["Rentabilidade (%)"].mean()
    rentabilidade_negativa = df_filtered[df_filtered["Rentabilidade (%)"] < 0]["Rentabilidade (%)"].mean()
    
    # Exibir estat√≠sticas
    st.markdown("### Estat√≠sticas de rentabilidade")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "M√©dia geral de rentabilidade", 
            f"{media_rentabilidade:.2f}%",
            delta=None
        )
    
    with col2:
        st.metric(
            "M√©dia das rentabilidades positivas", 
            f"{rentabilidade_positiva:.2f}%",
            delta="positivo", 
            delta_color="normal"
        )
    
    with col3:
        st.metric(
            "M√©dia das rentabilidades negativas", 
            f"{rentabilidade_negativa:.2f}%",
            delta="negativo", 
            delta_color="inverse"
        )
    
    # Tabela detalhada
    st.markdown("### Dados detalhados")
    tabela = df_filtered[["emp", "Rentabilidade (%)", "lucros", "PL", "Status", "Depend√™ncia"]].copy()
    tabela.columns = ["Empresa", "Rentabilidade (%)", "Lucro/Preju√≠zo (R$)", "Patrim√¥nio L√≠quido (R$)", "Status", "Depend√™ncia"]
    
    # Ordenar por rentabilidade (maior para menor)
    tabela = tabela.sort_values(by="Rentabilidade (%)", ascending=False)
    
    # Exibir tabela formatada
    st.dataframe(
        tabela,
        column_config={
            "Rentabilidade (%)": st.column_config.NumberColumn(
                "Rentabilidade (%)", 
                format="%.2f%%"
            ),
            "Lucro/Preju√≠zo (R$)": st.column_config.NumberColumn(
                "Lucro/Preju√≠zo (R$)",
                format="R$ %.2f"
            ),
            "Patrim√¥nio L√≠quido (R$)": st.column_config.NumberColumn(
                "Patrim√¥nio L√≠quido (R$)",
                format="R$ %.2f"
            )
        },
        hide_index=True,
        use_container_width=True
    )


st.subheader("Rentabilidade m√©dia das empresas por setor em 2023 (Lucro ou Preju√≠zo / Patrim√¥nio L√≠quido)", divider="red")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico abaixo, de rentabilidade m√©dia das empresas estatais do Distrito Federal em 2023, por setor, reflete a efici√™ncia na utiliza√ß√£o do patrim√¥nio l√≠quido para gerar resultados financeiros positivos ou negativos. Os setores de saneamento, energia e financeiro destacaram-se positivamente, apresentando os melhores √≠ndices de rentabilidade m√©dia. O setor de saneamento, liderado pela CAESB, alcan√ßou o topo do ranking, evidenciando a robustez da gest√£o operacional e a relev√¢ncia estrat√©gica de servi√ßos essenciais bem estruturados. J√° os setores de energia e financeiro, com destaque para o grupo CEB e o BRB, respectivamente, demonstraram grande capacidade de gera√ß√£o de receita em contextos econ√¥micos desafiadores, refor√ßando a maturidade na gest√£o dos ativos e a diversifica√ß√£o dos modelos de neg√≥cio.

Por outro lado, o setor de gest√£o de ativos registrou o pior desempenho, com uma rentabilidade m√©dia extremamente negativa. Essa situa√ß√£o pode ser atribu√≠da a desafios estruturais e operacionais enfrentados pela DF Gest√£o de Ativos, que sofre com a baixa utiliza√ß√£o de seu patrim√¥nio e modelos de neg√≥cios ineficazes. O desempenho negativo desse setor √© um alerta para a necessidade de reestrutura√ß√£o e estrat√©gias voltadas √† valoriza√ß√£o e melhor uso dos ativos administrados, buscando reverter preju√≠zos e aumentar a sustentabilidade financeira.

Os setores de habita√ß√£o e urbaniza√ß√£o, transporte e abastecimento de alimentos tamb√©m apresentaram resultados negativos, mas em menor magnitude quando comparados ao setor de gest√£o de ativos. A CODHAB e o Metr√¥/DF, l√≠deres nesses setores, operam em √°reas altamente dependentes de subs√≠dios governamentais, enfrentando dificuldades para alinhar a presta√ß√£o de servi√ßos sociais √†s exig√™ncias de rentabilidade financeira. Esses resultados sugerem a necessidade de pol√≠ticas p√∫blicas e interven√ß√µes estrat√©gicas que equilibrem o impacto social e a efici√™ncia financeira, garantindo a continuidade e melhoria dos servi√ßos essenciais para a popula√ß√£o.

Em s√≠ntese, a an√°lise de rentabilidade m√©dia por setor em 2023 evidencia disparidades significativas no desempenho das estatais distritais, refor√ßando a import√¢ncia de estrat√©gias espec√≠ficas para cada setor. Setores lucrativos devem continuar investindo em inova√ß√£o e expans√£o, enquanto setores deficit√°rios necessitam de reformas estruturais e melhorias na governan√ßa para superar os desafios financeiros e operacionais. Essa abordagem permitir√° maior equil√≠brio entre a sustentabilidade financeira das empresas e seu papel estrat√©gico no desenvolvimento econ√¥mico e social do Distrito Federal.

Instituto BRB e BRB Administradora e Corretora de Seguros n√£o aparecem no gr√°fico pois possuem dados faltantes. Al√©m disso, foram desconsideradas as empresas com patrim√¥nio l√≠quido negativo:

CEBGAS - Companhia Brasiliense de G√°s

CODEPLAN - Companhia de Planejamento do Distrito Federal

EMATER - Empresa de Assist√™ncia T√©cnica e Extens√£o Rural do Distrito Federal

SAB - Sociedade de Abastecimento de Bras√≠lia

""")	

# Filtrar o dataframe para incluir apenas o Estado DF e Ano 2023
df_filtered = df[(df["Estado"] == "DF") & (df["Ano"] == 2023)].copy()

# Remover linhas com valores NaN nas colunas necess√°rias e desconsiderar PL negativo
df_filtered = df_filtered.dropna(subset=["lucros", "PL", "setor"])
df_filtered = df_filtered[df_filtered["PL"] > 0]  # Excluir empresas com PL negativo

# Calcular Rentabilidade (%)
df_filtered["Rentabilidade (%)"] = (df_filtered["lucros"] / df_filtered["PL"]) * 100

# Agrupar por setor e calcular a m√©dia de rentabilidade e compilar a lista de empresas
df_grouped = (
    df_filtered.groupby("setor")
    .agg(
        Rentabilidade_medio=("Rentabilidade (%)", "mean"),
        Lucros_total=("lucros", "sum"),
        PL_total=("PL", "sum"),
        empresas=("emp", lambda x: list(x)),
        num_empresas=("emp", "count")
    )
    .reset_index()
)

# Adicionar uma coluna para status da rentabilidade
df_grouped["Status"] = df_grouped["Rentabilidade_medio"].apply(
    lambda x: "Rentabilidade Positiva" if x >= 0 else "Rentabilidade Negativa"
)

# Criar coluna com lista de empresas para exibi√ß√£o no hover
df_grouped["empresas_list"] = df_grouped["empresas"].apply(lambda x: ", ".join(x))

# Ordenar o dataframe pela rentabilidade m√©dia
df_grouped.sort_values(by="Rentabilidade_medio", ascending=True, inplace=True)

# Cria√ß√£o do gr√°fico de barras por setor
fig = px.bar(
    df_grouped,
    x="Rentabilidade_medio",
    y="setor",
    orientation="h",
    color="Status",
    color_discrete_map={
        "Rentabilidade Positiva": "#007acc", 
        "Rentabilidade Negativa": "#F45046"
    },
    hover_data={
        "Rentabilidade_medio": ":.2f",
        "Lucros_total": ":,.2f",
        "PL_total": ":,.2f",
        "empresas_list": True,
        "num_empresas": True,
        "Status": False
    },
    labels={
        "setor": "Setor",
        "Rentabilidade_medio": "Rentabilidade M√©dia (%)",
        "Lucros_total": "Lucros Totais (R$)",
        "PL_total": "Patrim√¥nio L√≠quido Total (R$)",
        "empresas_list": "Empresas",
        "num_empresas": "N√∫mero de Empresas"
    },
    text="Rentabilidade_medio"  # Adicionar valor na barra
)

# Personalizar o texto nas barras
fig.update_traces(
    texttemplate="%{x:.1f}%",
    textposition="outside",
    textfont=dict(size=12, color="black"),
    cliponaxis=False,  # Permitir que o texto seja exibido fora do eixo
)

# Formatando o hovertemplate para exibir valores de forma mais amig√°vel
fig.update_traces(
    hovertemplate=(
        "<b>%{y}</b><br>"
        "Rentabilidade M√©dia: %{x:.2f}%<br>"
        "Lucros Totais: R$ %{customdata[0]:,.2f}<br>"
        "Patrim√¥nio L√≠quido Total: R$ %{customdata[1]:,.2f}<br>"
        "Empresas (%{customdata[3]}): %{customdata[2]}<extra></extra>"
    )
)

# Linha de refer√™ncia em 0%
fig.add_vline(
    x=0, 
    line_dash="dash", 
    line_color="gray",
    annotation_text="Rentabilidade Zero",
    annotation_position="top"
)

# Melhorar o layout do gr√°fico
fig.update_layout(
    height=500,
    plot_bgcolor="white",
    paper_bgcolor="white",
    title={
        "text": "<b>Rentabilidade M√©dia por Setor das Empresas Estatais do DF em 2023</b>",
        "y": 0.98,
        "x": 0.5,
        "xanchor": "center",
        "yanchor": "top",
        "font": {"size": 20, "color": "black"}
    },
    xaxis=dict(
        title=dict(
            text="Rentabilidade M√©dia (%)", 
            font=dict(size=14, color="black"),
            standoff=25  # Aumentar a dist√¢ncia entre o t√≠tulo do eixo e os n√∫meros
        ),
        tickfont=dict(size=12, color="black"),
        gridcolor="lightgray",
        zerolinecolor="black",
        zerolinewidth=1.5
    ),
    yaxis=dict(
        title=dict(text="Setor", font=dict(size=14, color="black")),
        tickfont=dict(size=12, color="black"),
        gridcolor="white"
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.30,  # Aumentar significativamente a dist√¢ncia da legenda
        xanchor="center",
        x=0.5,
        font=dict(size=12, color="black"),
        borderwidth=1,
        bordercolor="lightgray",
        bgcolor="rgba(255, 255, 255, 0.9)"  # Adicionar um fundo semi-transparente
    ),
    margin=dict(l=50, r=80, t=80, b=150)  # Aumentar significativamente a margem inferior
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

# Adicionar informa√ß√µes complementares
with st.expander("üìä Ver detalhes da rentabilidade por setor"):
    # Calcular estat√≠sticas
    setores_positivos = df_grouped[df_grouped["Rentabilidade_medio"] > 0]
    setores_negativos = df_grouped[df_grouped["Rentabilidade_medio"] < 0]
    
    # M√©tricas gerais
    st.markdown("### Estat√≠sticas de rentabilidade por setor")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Total de setores analisados", 
            f"{len(df_grouped)}",
            delta=None
        )
    
    with col2:
        st.metric(
            "Setores com rentabilidade positiva", 
            f"{len(setores_positivos)}",
            delta=f"{len(setores_positivos)/len(df_grouped)*100:.1f}%", 
            delta_color="normal"
        )
    
    with col3:
        st.metric(
            "Setores com rentabilidade negativa", 
            f"{len(setores_negativos)}",
            delta=f"{len(setores_negativos)/len(df_grouped)*100:.1f}%", 
            delta_color="inverse"
        )
    
    # Tabela detalhada
    st.markdown("### Detalhamento por setor")
    
    # Preparar dados para a tabela
    tabela_setores = df_grouped.copy()
    tabela_setores["Empresas"] = tabela_setores["empresas_list"]
    tabela_setores = tabela_setores[["setor", "Rentabilidade_medio", "Lucros_total", "PL_total", "num_empresas", "Empresas"]]
    tabela_setores.columns = ["Setor", "Rentabilidade M√©dia (%)", "Lucros Totais (R$)", "Patrim√¥nio L√≠quido Total (R$)", "N√∫mero de Empresas", "Empresas"]
    
    # Ordenar por rentabilidade (maior para menor)
    tabela_setores = tabela_setores.sort_values(by="Rentabilidade M√©dia (%)", ascending=False)
    
    # Exibir tabela formatada
    st.dataframe(
        tabela_setores,
        column_config={
            "Rentabilidade M√©dia (%)": st.column_config.NumberColumn(
                "Rentabilidade M√©dia (%)", 
                format="%.2f%%"
            ),
            "Lucros Totais (R$)": st.column_config.NumberColumn(
                "Lucros Totais (R$)",
                format="R$ %.2f"
            ),
            "Patrim√¥nio L√≠quido Total (R$)": st.column_config.NumberColumn(
                "Patrim√¥nio L√≠quido Total (R$)",
                format="R$ %.2f"
            ),
            "N√∫mero de Empresas": st.column_config.NumberColumn(
                "N√∫mero de Empresas"
            ),
            "Empresas": st.column_config.TextColumn(
                "Empresas", 
                width="large"
            )
        },
        hide_index=True,
        use_container_width=True
    )
    
    # Mostrar informa√ß√µes adicionais sobre o setor mais e menos rent√°vel
    st.markdown("### Destaques")
    col1, col2 = st.columns(2)
    
    with col1:
        setor_mais_rentavel = tabela_setores.iloc[0]
        st.success(f"**Setor mais rent√°vel: {setor_mais_rentavel['Setor']}**")
        st.write(f"Rentabilidade m√©dia: **{setor_mais_rentavel['Rentabilidade M√©dia (%)']:.2f}%**")
        st.write(f"Empresas: {setor_mais_rentavel['Empresas']}")
    
    with col2:
        setor_menos_rentavel = tabela_setores.iloc[-1]
        st.error(f"**Setor menos rent√°vel: {setor_menos_rentavel['Setor']}**")
        st.write(f"Rentabilidade m√©dia: **{setor_menos_rentavel['Rentabilidade M√©dia (%)']:.2f}%**")
        st.write(f"Empresas: {setor_menos_rentavel['Empresas']}")



# Bot√£o para voltar √† p√°gina inicial
if st.button("Voltar √† P√°gina Inicial"):
    st.switch_page("In√≠cio.py")
