# Importando as bibliotecas
import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
import base64
import matplotlib.pyplot as plt
import seaborn as sns
import io

# Caminho relativo ao arquivo CSV
file_path = '../BD_Completo_Nacional_Formatado.csv'

# Carregando o arquivo CSV no Pandas DataFrame
df = pd.read_csv(file_path)

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Comparativo com outros Estados",
    page_icon="üìà",
    layout="wide"
)

st.header("Comparativo com outros Estados", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

Esta se√ß√£o do painel incorpora quatro gr√°ficos distintos que oferecem uma an√°lise detalhada das empresas estatais. O primeiro gr√°fico ilustra o Total de empresas por Estado, ano e setor, fornecendo uma vis√£o clara sobre a distribui√ß√£o e evolu√ß√£o dessas entidades ao longo do tempo e de acordo com diferentes segmentos econ√¥micos. 

O segundo gr√°fico apresenta o Resultado l√≠quido das empresas para o Estado Acionista por Estado e por ano, permitindo uma observa√ß√£o dos lucros e preju√≠zos gerados em cada Estado ao longo dos anos.

O terceiro gr√°fico vai al√©m, detalhando o Resultado L√≠quido das Empresas para o Estado Acionista por Estado, por ano e por setor, o que ajuda a identificar quais setores contribuem mais significativamente para os resultados financeiros de cada Estado. 

Por fim, o quarto gr√°fico aborda o Resultado L√≠quido das Empresas para o Estado Acionista por Estado, por ano e por depend√™ncia, oferecendo insights cruciais sobre a rela√ß√£o entre depend√™ncia financeira de certas empresas e seu impacto nos cofres estaduais. Juntos, esses gr√°ficos proporcionam uma an√°lise robusta e abrangente, essencial para a avalia√ß√£o do desempenho das empresas estatais do Distrito Federal no cen√°rio nacional.

""")	


st.subheader("Total de empresas por Estado, por ano e por setor", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico apresentado a seguir oferece um panorama abrangente sobre a distribui√ß√£o de empresas estatais em diferentes estados brasileiros, segmentado por setor e ano, permitindo uma an√°lise comparativa entre as administra√ß√µes estaduais e a evolu√ß√£o no n√∫mero de empresas ao longo do tempo. A diversidade setorial e a concentra√ß√£o de empresas em determinados estados refletem tanto as prioridades pol√≠ticas quanto as condi√ß√µes econ√¥micas regionais, al√©m de apontar para diferen√ßas marcantes na gest√£o de estatais entre os estados.

Alguns estados destacam-se pela elevada concentra√ß√£o de empresas estatais em setores estrat√©gicos, como energia, transporte e habita√ß√£o, que est√£o diretamente relacionados ao fornecimento de servi√ßos essenciais. Estados com maior participa√ß√£o nesses setores demonstram um comprometimento significativo com o atendimento de demandas regionais por infraestrutura e servi√ßos p√∫blicos. Por outro lado, estados com menor n√∫mero de empresas em setores como pesquisa e assist√™ncia t√©cnica agropecu√°ria ou saneamento podem indicar menor diversifica√ß√£o econ√¥mica ou depend√™ncia de iniciativas privadas para suprir essas demandas.

A evolu√ß√£o temporal revela mudan√ßas no n√∫mero de empresas estatais, o que pode estar relacionado √† cria√ß√£o de novas empresas para atender demandas espec√≠ficas ou √† reestrutura√ß√£o de estatais existentes. Essa din√¢mica √© evidente em anos em que houve um crescimento expressivo em determinados setores, como energia e habita√ß√£o, sugerindo pol√≠ticas de expans√£o e investimento p√∫blico para impulsionar o desenvolvimento regional. Em contrapartida, a redu√ß√£o no n√∫mero de empresas em outros estados pode refletir iniciativas de privatiza√ß√£o, fechamento de empresas deficit√°rias ou fus√µes que visam otimizar a gest√£o e reduzir custos operacionais.

Adicionalmente, a presen√ßa significativa de setores como transporte e saneamento em alguns estados aponta para uma forte depend√™ncia de subs√≠dios governamentais nesses servi√ßos essenciais. Em contrapartida, setores como financeiro e energia, que possuem maior potencial de gera√ß√£o de receita, demonstram maior presen√ßa em estados com pol√≠ticas p√∫blicas mais orientadas ao mercado e que utilizam essas empresas como importantes alavancas econ√¥micas. Essa varia√ß√£o entre os estados reflete as diferen√ßas nas estrat√©gias de governan√ßa e prioridades regionais, influenciando diretamente a sustentabilidade financeira das empresas e seu impacto no desenvolvimento local.

De forma geral, o gr√°fico destaca a import√¢ncia de estrat√©gias diferenciadas e adaptadas √†s caracter√≠sticas regionais para a gest√£o de empresas estatais. Ao mesmo tempo, a an√°lise evidencia oportunidades para aumentar a efici√™ncia em setores deficit√°rios e potencializar os resultados financeiros em √°reas com maior capacidade de gera√ß√£o de receita, como energia e servi√ßos financeiros. O comparativo entre estados fornece insights valiosos para a formula√ß√£o de pol√≠ticas p√∫blicas mais eficazes e sustent√°veis.

""")	

# Filtrar os estados para garantir que todos est√£o sendo inclu√≠dos
df_filtrado = df[df["Estado"].notna()]

# Verificar se h√° dados dispon√≠veis
if len(df_filtrado) == 0:
    st.warning("N√£o h√° dados dispon√≠veis com informa√ß√£o de Estado.")
else:
    # Interface de sele√ß√£o para filtrar os dados (opcional, pode ser removido se quiser manter exatamente como o original)
    col1, col2 = st.columns(2)
    
    with col1:
        # Filtrar anos dispon√≠veis
        anos_dispon√≠veis = sorted(df_filtrado["Ano"].unique())
        anos_selecionados = st.multiselect(
            "Selecione os anos:",
            options=anos_dispon√≠veis,
            default=anos_dispon√≠veis  # Selecionar todos por padr√£o
        )
    
    with col2:
        # Filtrar estados dispon√≠veis
        estados_dispon√≠veis = sorted(df_filtrado["Estado"].unique())
        estados_selecionados = st.multiselect(
            "Selecione os estados:",
            options=estados_dispon√≠veis,
            default=estados_dispon√≠veis  # Selecionar todos por padr√£o
        )
    
    # Aplicar filtros se selecionados
    if anos_selecionados:
        df_filtrado = df_filtrado[df_filtrado["Ano"].isin(anos_selecionados)]
    
    if estados_selecionados:
        df_filtrado = df_filtrado[df_filtrado["Estado"].isin(estados_selecionados)]
    
    # Verificar novamente ap√≥s filtros
    if len(df_filtrado) == 0:
        st.warning("Nenhum dado dispon√≠vel com os filtros selecionados.")
    else:
        # Agrupar por estado, ano e setor para contar as empresas - exatamente como no original
        agrupado = df_filtrado.groupby(["Estado", "Ano", "setor"]).size().unstack(fill_value=0)
        
        # Ajustar os √≠ndices para adicionar mais espa√ßamento (concatenando Estado e Ano)
        x_labels = ["{}, {}".format(estado, ano) for estado, ano in agrupado.index]
        x = np.arange(len(x_labels))
        
        # Criar figura matplotlib
        fig, ax = plt.subplots(figsize=(18, 10))  # Aumentando o tamanho da figura
        width = 0.9  # Largura das barras, para aumentar o espa√ßamento entre elas
        
        # Plotar gr√°fico de barras empilhadas - mesmo gr√°fico do original
        agrupado.plot(kind="bar", stacked=True, ax=ax, width=width)
        
        # Ajustar os r√≥tulos do eixo X para que haja mais espa√ßamento e garantir que fiquem vis√≠veis
        ax.set_xticks(x)
        ax.set_xticklabels(
            x_labels, rotation=90, ha="center", fontsize=8
        )  # Rotacionando os r√≥tulos
        
        # Definir t√≠tulo e r√≥tulos
        plt.title("Total de Empresas Estatais por Estado, Ano e Setor", fontsize=16)
        plt.xlabel("Estado, Ano", fontsize=14)
        plt.ylabel("N√∫mero de Empresas", fontsize=14)
        
        # Ajustar a posi√ß√£o da legenda e o layout para evitar sobreposi√ß√£o
        plt.legend(title="Setor", bbox_to_anchor=(1.05, 1), loc="upper left")
        plt.tight_layout()
        
        # Exibir no Streamlit - aqui est√° a principal diferen√ßa da vers√£o original
        st.pyplot(fig)
        
        # Adicionar op√ß√£o para download do gr√°fico (funcionalidade extra)
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        
        btn = st.download_button(
            label="Baixar Gr√°fico",
            data=buffer,
            file_name="total_empresas_estatais_por_estado_ano_setor.png",
            mime="image/png"
        )

st.subheader("Resultado L√≠quido das Empresas para o Estado Acionista por Estado e por ano", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico demonstra o desempenho financeiro das empresas estatais para seus respectivos estados acionistas, distribu√≠do por ano e estado, evidenciando uma discrep√¢ncia significativa entre lucros e preju√≠zos ao longo do per√≠odo analisado. A an√°lise revela que, enquanto alguns estados conseguem gerar resultados positivos consistentes por meio de suas empresas p√∫blicas, outros enfrentam d√©ficits expressivos que impactam negativamente suas finan√ßas p√∫blicas. A varia√ß√£o observada reflete n√£o apenas a natureza e gest√£o das empresas estatais em cada estado, mas tamb√©m as condi√ß√µes econ√¥micas regionais e as pol√≠ticas p√∫blicas adotadas.

Estados como S√£o Paulo e Minas Gerais aparecem com resultados positivos significativos em anos espec√≠ficos, impulsionados, sobretudo, por empresas dos setores financeiro e energ√©tico. Essas empresas, caracterizadas por maior efici√™ncia e potencial de gera√ß√£o de receita, t√™m se destacado em seus mercados e contribu√≠do de forma relevante para o equil√≠brio fiscal dos estados. Esse desempenho √© reflexo de uma gest√£o orientada para resultados e da diversifica√ß√£o de opera√ß√µes, o que permite maior resili√™ncia frente √†s varia√ß√µes econ√¥micas e setoriais.

Em contrapartida, estados como Rio de Janeiro e Rio Grande do Sul enfrentam d√©ficits expressivos ao longo de v√°rios anos, com destaque para empresas de setores como transporte e habita√ß√£o, que tradicionalmente demandam subs√≠dios governamentais para manter suas opera√ß√µes. O estado do Rio de Janeiro, em particular, apresenta quedas acentuadas nos resultados l√≠quidos, refletindo problemas estruturais, altos custos operacionais e dificuldades na gera√ß√£o de receitas suficientes para equilibrar despesas. Esse padr√£o aponta para a necessidade de reestrutura√ß√£o nos modelos de neg√≥cios dessas empresas e maior efici√™ncia na aloca√ß√£o de recursos p√∫blicos.

O gr√°fico tamb√©m evidencia per√≠odos de deteriora√ß√£o financeira generalizada, especialmente em anos marcados por crises econ√¥micas, como 2020, que refletiram os impactos da pandemia de COVID-19. Nesse per√≠odo, a maioria dos estados registrou resultados l√≠quidos negativos, indicando os desafios enfrentados pelas empresas estatais em manter suas opera√ß√µes durante um contexto de retra√ß√£o econ√¥mica e aumento de custos. A an√°lise global do gr√°fico refor√ßa a import√¢ncia de estrat√©gias diferenciadas e adapta√ß√µes estruturais, tanto para melhorar os desempenhos financeiros quanto para garantir a sustentabilidade das empresas p√∫blicas em estados com desafios fiscais mais agudos.

""")	

# Filtrar os dados novamente para garantir que estamos usando os dados filtrados pelos seletores
if len(df_filtrado) == 0:
    st.warning("N√£o h√° dados dispon√≠veis para gerar o gr√°fico de resultado l√≠quido.")
else:
    # Interface de filtros espec√≠fica para este gr√°fico
    col1, col2 = st.columns(2)
    
    with col1:
        # Filtrar anos dispon√≠veis
        anos_resultado = sorted(df_filtrado["Ano"].unique())
        anos_selecionados_resultado = st.multiselect(
            "Filtrar por anos:",
            options=anos_resultado,
            default=anos_resultado,
            key="anos_resultado"
        )
    
    with col2:
        # Filtrar estados dispon√≠veis
        estados_resultado = sorted(df_filtrado["Estado"].unique())
        estados_selecionados_resultado = st.multiselect(
            "Filtrar por estados:",
            options=estados_resultado,
            default=estados_resultado,  # Selecionar todos por padr√£o
            key="estados_resultado"
        )
    
    # Aplicar filtros se selecionados
    df_resultado = df_filtrado.copy()
    
    if anos_selecionados_resultado:
        df_resultado = df_resultado[df_resultado["Ano"].isin(anos_selecionados_resultado)]
    
    if estados_selecionados_resultado:
        df_resultado = df_resultado[df_resultado["Estado"].isin(estados_selecionados_resultado)]
    
    # Verificar novamente ap√≥s filtros
    if len(df_resultado) == 0:
        st.warning("Nenhum dado dispon√≠vel com os filtros selecionados para o gr√°fico de resultado l√≠quido.")
    else:
        # Certifique-se de que os valores de 'Resultado para o Estado Acionista' sejam num√©ricos
        df_resultado["Resultado para o Estado Acionista"] = pd.to_numeric(
            df_resultado["Resultado para o Estado Acionista"], errors="coerce"
        )
        
        # Agrupar por Estado e Ano para somar o Resultado L√≠quido para o Estado Acionista
        agrupado_resultado = (
            df_resultado.groupby(["Estado", "Ano"])["Resultado para o Estado Acionista"]
            .sum()
            .reset_index()
        )
        
        # Criar coluna combinada de Estado e Ano para o eixo X
        agrupado_resultado["Estado_Ano"] = agrupado_resultado["Estado"] + ", " + agrupado_resultado["Ano"].astype(str)
        
        # Ordenar por Estado e Ano para melhor visualiza√ß√£o
        agrupado_resultado = agrupado_resultado.sort_values(by=["Estado", "Ano"])
        
        # Determinar as cores com base se o valor √© positivo ou negativo
        agrupado_resultado["color"] = agrupado_resultado[
            "Resultado para o Estado Acionista"
        ].apply(lambda x: "#007acc" if x > 0 else "#F46045")
        
        # Escolha entre gr√°fico de barras ou gr√°fico de linha
        tipo_grafico = st.radio(
            "Escolha o tipo de visualiza√ß√£o:",
            options=["Barras", "Linhas por Estado"],
            horizontal=True,
            key="tipo_grafico_resultado"
        )
        
        # Modifica√ß√£o para gr√°fico de barras

        if tipo_grafico == "Barras":
            # Criar gr√°fico de barras interativo com Plotly
            fig = go.Figure()
            
            # Adicionar barras ao gr√°fico
            for i, row in agrupado_resultado.iterrows():
                fig.add_trace(
                    go.Bar(
                        x=[row["Estado_Ano"]],
                        y=[row["Resultado para o Estado Acionista"]],
                        name=row["Estado_Ano"],
                        hoverinfo="text",
                        textposition="none",
                        hovertext=f"<b>Estado:</b> {row['Estado']}<br><b>Ano:</b> {row['Ano']}<br><b>Resultado:</b> R$ {row['Resultado para o Estado Acionista']:,.2f}",
                        marker_color=row["color"],
                    )
                )
            
            # Adicionar linha de refer√™ncia no zero
            fig.add_shape(
                type="line",
                x0=0,
                y0=0,
                x1=1,
                y1=0,
                line=dict(color="gray", width=1, dash="dash"),
                xref="paper",
                yref="y"
            )
            
            # Atualizar layout do gr√°fico
            fig.update_layout(
                title="Resultado L√≠quido das Empresas para o Estado Acionista",
                xaxis_title="Estado, Ano",
                yaxis_title="Resultado L√≠quido (R$)",
                yaxis=dict(
                    gridcolor="lightgray",
                    title=dict(font=dict(color="black", size=14)),  # Cor preta para t√≠tulo do eixo Y
                    tickfont=dict(color="black", size=12),  # Cor preta para valores do eixo Y
                ),
                xaxis=dict(
                    tickangle=-90,
                    tickfont=dict(size=10, color="black"),  # Cor preta para valores do eixo X
                    title=dict(font=dict(color="black", size=14)),  # Cor preta para t√≠tulo do eixo X
                ),
                showlegend=False,
                template="plotly_white",
                height=600,
                margin=dict(l=40, r=40, t=60, b=150),
                plot_bgcolor="white",
                paper_bgcolor="white",
                title_font=dict(color="black"),  # Cor preta para t√≠tulo principal
            )
            
            # Mostrar o gr√°fico
            st.plotly_chart(fig, use_container_width=True)

        else:  # Gr√°fico de linhas por Estado
            # Criar gr√°fico de linhas com Plotly Express
            fig = px.line(
                agrupado_resultado,
                x="Ano",
                y="Resultado para o Estado Acionista",
                color="Estado",
                markers=True,
                labels={
                    "Resultado para o Estado Acionista": "Resultado L√≠quido (R$)",
                    "Ano": "Ano",
                    "Estado": "Estado"
                },
                title="Evolu√ß√£o do Resultado L√≠quido por Estado ao Longo dos Anos",
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            
            # Adicionar linha de refer√™ncia no zero
            fig.add_hline(
                y=0,
                line_dash="dash",
                line_color="gray",
                annotation_text="Equil√≠brio",
                annotation_position="right"
            )
            
            # Atualizar formata√ß√£o do hover
            fig.update_traces(
                hovertemplate="<b>%{customdata[0]}</b><br>Ano: %{x}<br>Resultado: R$ %{y:,.2f}<extra></extra>",
                customdata=agrupado_resultado[["Estado"]],
            )
            
            # Atualizar layout do gr√°fico
            fig.update_layout(
                xaxis_title="Ano",
                yaxis_title="Resultado L√≠quido (R$)",
                legend_title="Estado",
                template="plotly_white",
                height=500,
                margin=dict(l=40, r=40, t=60, b=40),
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=-0.3,
                    xanchor="center",
                    x=0.5,
                    font=dict(color="black", size=12)  # Cor preta para legenda
                ),
                xaxis=dict(
                    title=dict(font=dict(color="black", size=14)),  # Cor preta para t√≠tulo do eixo X
                    tickfont=dict(color="black", size=12),  # Cor preta para valores do eixo X
                    gridcolor="lightgray"
                ),
                yaxis=dict(
                    title=dict(font=dict(color="black", size=14)),  # Cor preta para t√≠tulo do eixo Y
                    tickfont=dict(color="black", size=12),  # Cor preta para valores do eixo Y
                    gridcolor="lightgray"
                ),
                plot_bgcolor="white",
                paper_bgcolor="white",
                title_font=dict(color="black")  # Cor preta para t√≠tulo principal
            )
            
            # Mostrar o gr√°fico
            st.plotly_chart(fig, use_container_width=True)
        
        # Adicionar se√ß√£o expand√≠vel com detalhes
        with st.expander("üìä Ver detalhes do resultado l√≠quido"):
            # Preparar dados para exibi√ß√£o
            tabela = agrupado_resultado[["Estado", "Ano", "Resultado para o Estado Acionista"]].copy()
            tabela = tabela.sort_values(by=["Estado", "Ano"])
            
            # Mostrar tabela formatada
            st.dataframe(
                tabela,
                column_config={
                    "Resultado para o Estado Acionista": st.column_config.NumberColumn(
                        "Resultado L√≠quido (R$)",
                        format="R$ %.2f"
                    )
                },
                hide_index=True,
                use_container_width=True
            )
            
            # An√°lise adicional
            col1, col2 = st.columns(2)
            
            with col1:
                # Estado com melhor resultado
                melhor_estado = agrupado_resultado.loc[agrupado_resultado["Resultado para o Estado Acionista"].idxmax()]
                st.success(f"**Maior resultado positivo**")
                st.write(f"**Estado**: {melhor_estado['Estado']}")
                st.write(f"**Ano**: {melhor_estado['Ano']}")
                st.write(f"**Valor**: R$ {melhor_estado['Resultado para o Estado Acionista']:,.2f}")
            
            with col2:
                # Estado com pior resultado
                pior_estado = agrupado_resultado.loc[agrupado_resultado["Resultado para o Estado Acionista"].idxmin()]
                st.error(f"**Maior resultado negativo**")
                st.write(f"**Estado**: {pior_estado['Estado']}")
                st.write(f"**Ano**: {pior_estado['Ano']}")
                st.write(f"**Valor**: R$ {pior_estado['Resultado para o Estado Acionista']:,.2f}")
            
            # Estat√≠sticas adicionais
            st.markdown("### Estat√≠sticas por Estado")
            
            # Agrupar por estado para an√°lise
            por_estado = agrupado_resultado.groupby("Estado")["Resultado para o Estado Acionista"].agg(
                ["sum", "mean", "min", "max", "count"]
            ).reset_index()
            por_estado.columns = ["Estado", "Total", "M√©dia", "M√≠nimo", "M√°ximo", "Anos com Dados"]
            
            # Ordenar por total
            por_estado = por_estado.sort_values(by="Total", ascending=False)
            
            # Mostrar tabela formatada
            st.dataframe(
                por_estado,
                column_config={
                    "Total": st.column_config.NumberColumn("Total (R$)", format="R$ %.2f"),
                    "M√©dia": st.column_config.NumberColumn("M√©dia Anual (R$)", format="R$ %.2f"),
                    "M√≠nimo": st.column_config.NumberColumn("M√≠nimo (R$)", format="R$ %.2f"),
                    "M√°ximo": st.column_config.NumberColumn("M√°ximo (R$)", format="R$ %.2f"),
                },
                hide_index=True,
                use_container_width=True
            )




st.subheader("Resultado L√≠quido das Empresas para o Estado Acionista por Estado, por ano e por setor", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico apresenta uma vis√£o detalhada do resultado l√≠quido das empresas estatais brasileiras, analisado por estado, ano e setor de atua√ß√£o. Essa segmenta√ß√£o permite identificar padr√µes setoriais de desempenho e tend√™ncias financeiras que variam significativamente entre regi√µes e per√≠odos, evidenciando tanto as potencialidades quanto os desafios enfrentados pelos estados no gerenciamento de suas estatais.

Estados que possuem forte atua√ß√£o em setores como financeiro e energia, a exemplo de S√£o Paulo, Minas Gerais e Paran√°, frequentemente registram resultados l√≠quidos positivos. Esses setores se destacam pela elevada capacidade de gera√ß√£o de receita, gra√ßas √† robustez de seus modelos de neg√≥cio, que combinam efici√™ncia operacional e diversifica√ß√£o de servi√ßos. Empresas financeiras e de energia, como bancos estatais regionais e concession√°rias de energia el√©trica, demonstram ser pilares importantes para o equil√≠brio fiscal de seus estados, desempenhando papel estrat√©gico em suas economias.

Por outro lado, o gr√°fico destaca o impacto negativo de setores como habita√ß√£o e urbaniza√ß√£o, transporte e pesquisa e assist√™ncia t√©cnica agropecu√°ria, que frequentemente apresentam d√©ficits significativos. Esses resultados negativos s√£o mais acentuados em estados como Rio de Janeiro e Rio Grande do Sul, onde empresas de transporte e habita√ß√£o enfrentam desafios estruturais, incluindo alta depend√™ncia de subs√≠dios governamentais e dificuldade em gerar receitas que cubram os custos operacionais. Essa situa√ß√£o √© agravada em anos de crise econ√¥mica, como 2020, quando os efeitos da pandemia de COVID-19 intensificaram os d√©ficits em diversos setores.

Adicionalmente, observa-se uma correla√ß√£o entre os resultados l√≠quidos negativos e a predomin√¢ncia de empresas em setores que atendem a demandas sociais essenciais. Empresas de saneamento, sa√∫de e transporte, embora deficit√°rias em muitos casos, desempenham pap√©is cr√≠ticos no cumprimento de pol√≠ticas p√∫blicas e no atendimento √† popula√ß√£o. Isso refor√ßa a necessidade de um equil√≠brio entre efici√™ncia financeira e impacto social, principalmente em estados com restri√ß√µes fiscais mais severas.

Por fim, a an√°lise segmentada por setor ao longo dos anos destaca a import√¢ncia da diversifica√ß√£o econ√¥mica e do fortalecimento da governan√ßa corporativa nas estatais. Estados que priorizam investimentos em setores de alta rentabilidade, como energia e financeiro, apresentam maior resili√™ncia fiscal, enquanto estados mais dependentes de setores deficit√°rios precisam buscar solu√ß√µes estrat√©gicas, como reestrutura√ß√£o de empresas, amplia√ß√£o de parcerias p√∫blico-privadas e moderniza√ß√£o tecnol√≥gica. Esses ajustes s√£o cruciais para garantir a sustentabilidade financeira e o impacto positivo das estatais no desenvolvimento econ√¥mico e social de suas respectivas regi√µes.

""")	

# Filtrar os dados para este gr√°fico
if len(df_filtrado) == 0:
    st.warning("N√£o h√° dados dispon√≠veis para gerar o gr√°fico de resultado l√≠quido por setor.")
else:
    # Interface de filtros espec√≠fica para este gr√°fico
    col1, col2 = st.columns(2)
    
    with col1:
        # Filtrar anos dispon√≠veis
        anos_resultado_setor = sorted(df_filtrado["Ano"].unique())
        anos_selecionados_resultado_setor = st.multiselect(
            "Filtrar por anos:",
            options=anos_resultado_setor,
            default=anos_resultado_setor,
            key="anos_resultado_setor"
        )
    
    with col2:
        # Filtrar estados dispon√≠veis - todos selecionados por padr√£o
        estados_resultado_setor = sorted(df_filtrado["Estado"].unique())
        estados_selecionados_resultado_setor = st.multiselect(
            "Filtrar por estados:",
            options=estados_resultado_setor,
            default=estados_resultado_setor,  # Todos os estados selecionados por padr√£o
            key="estados_resultado_setor"
        )
    
    # Aplicar filtros se selecionados
    df_resultado_setor = df_filtrado.copy()
    
    if anos_selecionados_resultado_setor:
        df_resultado_setor = df_resultado_setor[df_resultado_setor["Ano"].isin(anos_selecionados_resultado_setor)]
    
    if estados_selecionados_resultado_setor:
        df_resultado_setor = df_resultado_setor[df_resultado_setor["Estado"].isin(estados_selecionados_resultado_setor)]
    
    # Verificar novamente ap√≥s filtros
    if len(df_resultado_setor) == 0:
        st.warning("Nenhum dado dispon√≠vel com os filtros selecionados para o gr√°fico de resultado l√≠quido por setor.")
    else:
        # Verificar se a coluna 'setor' existe
        if 'setor' not in df_resultado_setor.columns:
            st.error("A coluna 'setor' n√£o foi encontrada nos dados. N√£o √© poss√≠vel gerar o gr√°fico.")
        else:
            # Certifique-se de que os valores sejam num√©ricos
            df_resultado_setor["Resultado para o Estado Acionista"] = pd.to_numeric(
                df_resultado_setor["Resultado para o Estado Acionista"], errors="coerce"
            )
            
            # Agrupar por Estado, Ano e Setor para somar o Resultado L√≠quido
            agrupado_resultado = (
                df_resultado_setor.groupby(["Estado", "Ano", "setor"])["Resultado para o Estado Acionista"]
                .sum()
                .unstack(fill_value=0)
            )
            
            # Preparando os dados para o matplotlib
            fig, ax = plt.subplots(figsize=(18, 10))
            width = 0.9  # Largura das barras para maior espa√ßamento
            
            # Plotar gr√°fico de barras empilhadas
            agrupado_resultado.plot(kind="bar", stacked=True, ax=ax, width=width)
            
            # Ajustar os √≠ndices e r√≥tulos
            x_labels = ["{}, {}".format(estado, ano) for estado, ano in agrupado_resultado.index]
            x = np.arange(len(x_labels))
            
            # Configurar os r√≥tulos do eixo X
            ax.set_xticks(x)
            ax.set_xticklabels(x_labels, rotation=90, ha="center", fontsize=8)
            
            # Adicionar linha no zero para facilitar visualiza√ß√£o
            ax.axhline(y=0, color='gray', linestyle='-', alpha=0.7, linewidth=0.8)
            
            # Ajustar limites do eixo Y para melhor visualiza√ß√£o
            min_value = agrupado_resultado.sum(axis=1).min()
            max_value = agrupado_resultado.sum(axis=1).max()
            y_range_min = min(min_value * 1.1, -500000000) if min_value < 0 else -500000000
            y_range_max = max(max_value * 1.1, 500000000)
            ax.set_ylim(bottom=y_range_min, top=y_range_max)
            
            # Definir t√≠tulo e r√≥tulos
            plt.title("Resultado L√≠quido das Empresas para o Estado Acionista por Estado, Ano e Setor", fontsize=16)
            plt.xlabel("Estado, Ano", fontsize=14)
            plt.ylabel("Resultado L√≠quido para o Estado (R$)", fontsize=14)
            
            # Ajustar a posi√ß√£o da legenda
            plt.legend(title="Setor", bbox_to_anchor=(1.05, 1), loc="upper left")
            
            # Ajustar o layout para evitar sobreposi√ß√£o
            plt.tight_layout()
            
            # Exibir gr√°fico no Streamlit
            st.pyplot(fig)
            
            # Adicionar bot√£o para download
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            
            st.download_button(
                label="Baixar Gr√°fico",
                data=buffer,
                file_name="resultado_liquido_por_setor.png",
                mime="image/png"
            )
            
            # Adicionar se√ß√£o de an√°lise expand√≠vel
            with st.expander("üìä Ver an√°lise detalhada por setor"):
                # Agrupar por setor para an√°lise global
                setor_analysis = df_resultado_setor.groupby("setor")["Resultado para o Estado Acionista"].agg(
                    ["sum", "mean", "count"]
                ).reset_index()
                setor_analysis.columns = ["Setor", "Total", "M√©dia", "Quantidade de Registros"]
                
                # Ordenar do mais positivo ao mais negativo
                setor_analysis = setor_analysis.sort_values(by="Total", ascending=False)
                
                # Mostrar tabela formatada
                st.dataframe(
                    setor_analysis,
                    column_config={
                        "Total": st.column_config.NumberColumn("Total (R$)", format="R$ %.2f"),
                        "M√©dia": st.column_config.NumberColumn("M√©dia (R$)", format="R$ %.2f")
                    },
                    hide_index=True,
                    use_container_width=True
                )
                
                # An√°lise de melhores e piores setores
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### Setores com melhor desempenho")
                    top_setores = setor_analysis.nlargest(3, "Total")
                    
                    for i, row in enumerate(top_setores.itertuples(), 1):
                        st.success(f"**{i}. {row.Setor}**")
                        st.write(f"Total: **R$ {row.Total:,.2f}**")
                        st.write(f"M√©dia: R$ {row.M√©dia:,.2f}")
                        st.write("---")
                
                with col2:
                    st.markdown("### Setores com pior desempenho")
                    bottom_setores = setor_analysis.nsmallest(3, "Total")
                    
                    for i, row in enumerate(bottom_setores.itertuples(), 1):
                        st.error(f"**{i}. {row.Setor}**")
                        st.write(f"Total: **R$ {row.Total:,.2f}**")
                        st.write(f"M√©dia: R$ {row.M√©dia:,.2f}")
                        st.write("---")



st.subheader("Resultado L√≠quido das Empresas para o Estado Acionista por Estado, por ano e por depend√™ncia", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""

O gr√°fico analisa o resultado l√≠quido das empresas estatais por estado, ano e classifica√ß√£o de depend√™ncia (dependente, n√£o dependente ou n√£o informado), evidenciando as disparidades de desempenho financeiro das empresas em rela√ß√£o ao suporte recebido de seus respectivos estados acionistas. A segmenta√ß√£o entre empresas dependentes e n√£o dependentes fornece uma vis√£o clara sobre a influ√™ncia da autonomia financeira na sustentabilidade das estatais.

Empresas n√£o dependentes, representadas em azul no gr√°fico, apresentam, em sua maioria, resultados l√≠quidos positivos ou menos deficit√°rios. Isso reflete sua capacidade de gerar receitas pr√≥prias suficientes para cobrir despesas operacionais e de capital. Estados como S√£o Paulo, Minas Gerais e Paran√° t√™m uma concentra√ß√£o maior de empresas n√£o dependentes que registram desempenho positivo, especialmente em setores como financeiro e energia. Essas empresas contribuem significativamente para o equil√≠brio fiscal do estado, demonstrando que a autonomia operacional combinada com boas pr√°ticas de governan√ßa pode resultar em maior efici√™ncia financeira.

Por outro lado, as empresas dependentes, destacadas em vermelho, apresentam d√©ficits expressivos, que s√£o mais evidentes em estados como Rio de Janeiro e Rio Grande do Sul. Setores como transporte, habita√ß√£o e urbaniza√ß√£o, altamente representados por empresas dependentes, frequentemente demandam aportes financeiros significativos do governo para custear suas opera√ß√µes. Esses d√©ficits refletem n√£o apenas a alta depend√™ncia de subs√≠dios governamentais, mas tamb√©m desafios estruturais relacionados a custos operacionais elevados e modelos de neg√≥cios pouco eficientes. Estados com maior concentra√ß√£o de empresas dependentes enfrentam desafios fiscais mais severos, dado o impacto direto desses d√©ficits no or√ßamento p√∫blico.

O gr√°fico tamb√©m destaca um padr√£o ao longo do tempo: anos de crises econ√¥micas, como 2020, apresentam d√©ficits mais acentuados, especialmente entre empresas dependentes, devido ao aumento dos custos operacionais e √† redu√ß√£o das receitas pr√≥prias. Por outro lado, os resultados das empresas n√£o dependentes mostram maior estabilidade e resili√™ncia em momentos de instabilidade econ√¥mica, refletindo modelos de neg√≥cios mais robustos.

A presen√ßa de uma categoria de dados n√£o informados, indicada em cinza, levanta a necessidade de maior transpar√™ncia nos relat√≥rios financeiros das estatais. A falta de clareza na classifica√ß√£o de depend√™ncia pode dificultar an√°lises mais precisas e a formula√ß√£o de estrat√©gias para melhorar a sustentabilidade financeira das empresas p√∫blicas. No geral, o gr√°fico refor√ßa a import√¢ncia de fortalecer a governan√ßa corporativa, promover a efici√™ncia operacional e buscar alternativas estrat√©gicas, como parcerias p√∫blico-privadas, especialmente para empresas deficit√°rias.

""")	

st.subheader("Resultado L√≠quido das Empresas para o Estado Acionista por Estado, por ano e por depend√™ncia", divider="violet")

# Conte√∫do espec√≠fico desta p√°gina
st.write("""
O gr√°fico analisa o resultado l√≠quido das empresas estatais por estado, ano e classifica√ß√£o de depend√™ncia (dependente, n√£o dependente ou n√£o informado), evidenciando as disparidades de desempenho financeiro das empresas em rela√ß√£o ao suporte recebido de seus respectivos estados acionistas. A segmenta√ß√£o entre empresas dependentes e n√£o dependentes fornece uma vis√£o clara sobre a influ√™ncia da autonomia financeira na sustentabilidade das estatais.
""")

# Verificar se h√° dados dispon√≠veis
if len(df_filtrado) == 0:
    st.warning("N√£o h√° dados dispon√≠veis para gerar o gr√°fico de resultado por depend√™ncia.")
else:
    # Verificar se a coluna 'dep' existe no DataFrame
    if 'dep' not in df_filtrado.columns:
        st.error("A coluna 'dep' (depend√™ncia) n√£o foi encontrada nos dados. N√£o √© poss√≠vel gerar o gr√°fico.")
    else:
        # Interface de filtros espec√≠fica para este gr√°fico
        col1, col2 = st.columns(2)
        
        with col1:
            # Filtrar anos dispon√≠veis
            anos_dep = sorted(df_filtrado["Ano"].unique())
            anos_selecionados_dep = st.multiselect(
                "Filtrar por anos:",
                options=anos_dep,
                default=anos_dep,
                key="anos_dep"
            )
        
        with col2:
            # Filtrar estados dispon√≠veis - todos selecionados por padr√£o
            estados_dep = sorted(df_filtrado["Estado"].unique())
            estados_selecionados_dep = st.multiselect(
                "Filtrar por estados:",
                options=estados_dep,
                default=estados_dep,  # Todos os estados selecionados por padr√£o
                key="estados_dep"
            )
        
        # Aplicar filtros se selecionados
        df_resultado_dep = df_filtrado.copy()
        
        if anos_selecionados_dep:
            df_resultado_dep = df_resultado_dep[df_resultado_dep["Ano"].isin(anos_selecionados_dep)]
        
        if estados_selecionados_dep:
            df_resultado_dep = df_resultado_dep[df_resultado_dep["Estado"].isin(estados_selecionados_dep)]
        
        # Verificar novamente ap√≥s filtros
        if len(df_resultado_dep) == 0:
            st.warning("Nenhum dado dispon√≠vel com os filtros selecionados para o gr√°fico de resultado por depend√™ncia.")
        else:
            # Certifique-se de que os valores sejam num√©ricos
            df_resultado_dep["Resultado para o Estado Acionista"] = pd.to_numeric(
                df_resultado_dep["Resultado para o Estado Acionista"], errors="coerce"
            )
            
            # Padronizar valores na coluna 'dep' para garantir consist√™ncia
            df_resultado_dep['dep'] = df_resultado_dep['dep'].fillna("N√£o Informado")
            df_resultado_dep['dep'] = df_resultado_dep['dep'].replace({
                'Dependente': 'Dependente',
                'N√£o Dependente': 'N√£o Dependente',
                'N√£o dependente': 'N√£o Dependente',
                'n√£o dependente': 'N√£o Dependente',
                'dependente': 'Dependente'
            })
            
            # Agrupar por Estado, Ano e 'dep' para somar o Resultado L√≠quido para o Estado Acionista
            agrupado_resultado = (
                df_resultado_dep.groupby(["Estado", "Ano", "dep"])["Resultado para o Estado Acionista"]
                .sum()
                .reset_index()
            )
            
            # Juntar Estado e Ano para usar como r√≥tulo
            agrupado_resultado["label"] = (
                agrupado_resultado["Estado"] + ", " + agrupado_resultado["Ano"].astype(str)
            )
            
            # Ordenar o DataFrame com base nos r√≥tulos alfab√©ticos
            agrupado_resultado.sort_values("label", inplace=True)
            
            # Definir as cores espec√≠ficas para cada categoria
            color_map = {
                "N√£o Dependente": "#007acc",
                "Dependente": "#F46045",
                "N√£o Informado": "rgba(150, 150, 150, 0.8)",
            }
            
            # Criar gr√°fico de barras interativo com Plotly
            fig = go.Figure()
            
            # Loop sobre cada 'dep' distinto e adicionar como uma s√©rie no gr√°fico
            for categoria in agrupado_resultado['dep'].unique():
                color = color_map.get(categoria, "gray")  # Usar gray como cor padr√£o se a categoria n√£o estiver no mapa
                df_categoria = agrupado_resultado[agrupado_resultado["dep"] == categoria]
                
                fig.add_trace(
                    go.Bar(
                        x=df_categoria["label"],
                        y=df_categoria["Resultado para o Estado Acionista"],
                        name=categoria,
                        hoverinfo="text",
                        textposition="none",
                        hovertext=df_categoria.apply(
                            lambda row: f"<b>Estado:</b> {row['Estado']}<br><b>Ano:</b> {row['Ano']}<br><b>Depend√™ncia:</b> {row['dep']}<br><b>Resultado:</b> R$ {row['Resultado para o Estado Acionista']:,.2f}",
                            axis=1,
                        ),
                        marker_color=color,
                    )
                )
            
            # Linha zero para refer√™ncia
            fig.add_shape(
                type="line",
                x0=0,
                y0=0,
                x1=1,
                y1=0,
                line=dict(color="gray", width=1, dash="dash"),
                xref="paper",
                yref="y"
            )
            
            # Atualizar layout do gr√°fico
            fig.update_layout(
                title="Resultado L√≠quido das Empresas para o Estado Acionista por Depend√™ncia",
                xaxis_title="Estado, Ano",
                yaxis_title="Resultado L√≠quido para o Estado (R$)",
                barmode="stack",
                xaxis=dict(
                    categoryorder="array",
                    categoryarray=sorted(agrupado_resultado["label"].unique()),
                    tickangle=-90,
                    tickfont=dict(size=10, color="black"),
                    title=dict(font=dict(color="black", size=14)),
                ),
                yaxis=dict(
                    tickfont=dict(color="black", size=12),
                    title=dict(font=dict(color="black", size=14)),
                    gridcolor="lightgray",
                ),
                legend=dict(
                    title=dict(text="Depend√™ncia", font=dict(color="black", size=12)),
                    font=dict(color="black"),
                    orientation="h",
                    yanchor="bottom",
                    y=-0.30,  # Aumentado para mover a legenda mais para baixo
                    xanchor="center",
                    x=0.5
                ),
                showlegend=True,
                template="plotly_white",
                height=600,
                margin=dict(l=40, r=40, t=80, b=180),  # Aumentado o valor de b (margem inferior)
                plot_bgcolor="white",
                paper_bgcolor="white",
                title_font=dict(color="black", size=16)
            )
            
            # Mostrar o gr√°fico
            st.plotly_chart(fig, use_container_width=True)
            
            # Adicionar se√ß√£o expand√≠vel com an√°lise detalhada
            with st.expander("üìä Ver an√°lise detalhada por depend√™ncia"):
                # Agrupar por tipo de depend√™ncia para an√°lise global
                dep_analysis = df_resultado_dep.groupby("dep")["Resultado para o Estado Acionista"].agg(
                    ["sum", "mean", "count"]
                ).reset_index()
                dep_analysis.columns = ["Depend√™ncia", "Total", "M√©dia", "Quantidade de Registros"]
                
                # Ordenar do mais positivo ao mais negativo
                dep_analysis = dep_analysis.sort_values(by="Total", ascending=False)
                
                # Mostrar tabela formatada
                st.dataframe(
                    dep_analysis,
                    column_config={
                        "Total": st.column_config.NumberColumn("Total (R$)", format="R$ %.2f"),
                        "M√©dia": st.column_config.NumberColumn("M√©dia (R$)", format="R$ %.2f")
                    },
                    hide_index=True,
                    use_container_width=True
                )
                
                # Compara√ß√£o direta entre categorias de depend√™ncia
                st.markdown("### Compara√ß√£o entre categorias de depend√™ncia")
                
                fig_comp = px.bar(
                    dep_analysis,
                    x="Depend√™ncia",
                    y="Total",
                    color="Depend√™ncia",
                    color_discrete_map={
                        "N√£o Dependente": "#007acc",
                        "Dependente": "#F46045",
                        "N√£o Informado": "rgba(150, 150, 150, 0.8)",
                    },
                    text="Total",
                    labels={"Total": "Resultado Total (R$)"},
                    height=400
                )
                
                # Configura√ß√µes adicionais
                fig_comp.update_traces(
                    texttemplate="R$ %{y:,.2f}",
                    textposition="outside"
                )
                
                fig_comp.update_layout(
                    xaxis_title=dict(text="Categoria de Depend√™ncia", font=dict(color="black", size=14)),
                    yaxis_title=dict(text="Resultado Total (R$)", font=dict(color="black", size=14)),
                    xaxis=dict(tickfont=dict(color="black")),
                    yaxis=dict(tickfont=dict(color="black")),
                    showlegend=False,
                    plot_bgcolor="white",
                    paper_bgcolor="white"
                )
                
                # Adicionar linha no zero
                fig_comp.add_hline(y=0, line_dash="dash", line_color="gray")
                
                # Mostrar o gr√°fico de compara√ß√£o
                st.plotly_chart(fig_comp, use_container_width=True)
                
                # An√°lise por estado e depend√™ncia
                st.markdown("### Resultado por Estado e Depend√™ncia")
                
                # Agrupar por estado e depend√™ncia
                estado_dep = df_resultado_dep.groupby(["Estado", "dep"])["Resultado para o Estado Acionista"].sum().reset_index()
                
                # Criar tabela din√¢mica para visualiza√ß√£o
                pivot_estado_dep = estado_dep.pivot_table(
                    index="Estado",
                    columns="dep",
                    values="Resultado para o Estado Acionista",
                    fill_value=0
                ).reset_index()
                
                # Adicionar coluna de total
                pivot_estado_dep["Total"] = pivot_estado_dep.iloc[:, 1:].sum(axis=1)
                
                # Ordenar por total
                pivot_estado_dep = pivot_estado_dep.sort_values("Total", ascending=False)
                
                # Formatar para exibi√ß√£o
                st.dataframe(
                    pivot_estado_dep,
                    column_config={
                        col: st.column_config.NumberColumn(
                            col, format="R$ %.2f"
                        ) for col in pivot_estado_dep.columns if col != "Estado"
                    },
                    hide_index=True,
                    use_container_width=True
                )

# Bot√£o para voltar √† p√°gina inicial
if st.button("Voltar √† P√°gina Inicial"):
    st.switch_page("In√≠cio.py")